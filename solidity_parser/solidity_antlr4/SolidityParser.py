# Generated from solidity-antlr4/Solidity.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0087")
        buf.write("\u0493\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write('\4\37\t\37\4 \t \4!\t!\4"\t"\4#\t#\4$\t$\4%\t%\4&\t')
        buf.write("&\4'\t'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\7\2\u00d7\n\2\f\2\16")
        buf.write("\2\u00da\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\5")
        buf.write("\3\5\3\5\5\5\u00e8\n\5\3\6\3\6\5\6\u00ec\n\6\3\6\7\6\u00ef")
        buf.write("\n\6\f\6\16\6\u00f2\13\6\3\7\3\7\3\b\5\b\u00f7\n\b\3\b")
        buf.write("\3\b\5\b\u00fb\n\b\3\b\5\b\u00fe\n\b\3\t\3\t\3\t\5\t\u0103")
        buf.write("\n\t\3\n\3\n\3\n\3\n\5\n\u0109\n\n\3\n\3\n\3\n\3\n\3\n")
        buf.write("\5\n\u0110\n\n\3\n\3\n\5\n\u0114\n\n\3\n\3\n\3\n\3\n\3")
        buf.write("\n\3\n\3\n\3\n\3\n\7\n\u011f\n\n\f\n\16\n\u0122\13\n\3")
        buf.write("\n\3\n\3\n\3\n\3\n\5\n\u0129\n\n\3\13\3\13\3\f\5\f\u012e")
        buf.write("\n\f\3\f\3\f\3\f\3\f\3\f\3\f\7\f\u0136\n\f\f\f\16\f\u0139")
        buf.write("\13\f\5\f\u013b\n\f\3\f\3\f\7\f\u013f\n\f\f\f\16\f\u0142")
        buf.write("\13\f\3\f\3\f\3\r\3\r\3\r\5\r\u0149\n\r\3\r\5\r\u014c")
        buf.write("\n\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16")
        buf.write("\u0157\n\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\7\17\u0160")
        buf.write("\n\17\f\17\16\17\u0163\13\17\3\17\3\17\3\17\5\17\u0168")
        buf.write("\n\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\23")
        buf.write("\3\23\3\23\3\23\3\23\5\23\u0183\n\23\3\23\5\23\u0186\n")
        buf.write("\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\7\24\u018f\n\24")
        buf.write("\f\24\16\24\u0192\13\24\3\24\3\24\5\24\u0196\n\24\3\25")
        buf.write("\3\25\3\25\5\25\u019b\n\25\3\26\3\26\3\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\7\27\u01a7\n\27\f\27\16\27\u01aa")
        buf.write("\13\27\5\27\u01ac\n\27\3\27\3\27\3\30\3\30\3\30\5\30\u01b3")
        buf.write("\n\30\3\30\3\30\7\30\u01b7\n\30\f\30\16\30\u01ba\13\30")
        buf.write("\3\30\3\30\5\30\u01be\n\30\3\31\3\31\3\31\5\31\u01c3\n")
        buf.write("\31\3\31\5\31\u01c6\n\31\3\32\3\32\3\32\3\32\5\32\u01cc")
        buf.write("\n\32\3\32\3\32\5\32\u01d0\n\32\3\33\3\33\5\33\u01d4\n")
        buf.write("\33\3\33\3\33\3\33\5\33\u01d9\n\33\3\34\3\34\3\34\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\7\35\u01e6\n\35\f")
        buf.write("\35\16\35\u01e9\13\35\3\36\3\36\3\36\3\36\5\36\u01ef\n")
        buf.write("\36\3\36\3\36\3\37\3\37\3 \3 \3 \3 \5 \u01f9\n \3 \3 ")
        buf.write("\7 \u01fd\n \f \16 \u0200\13 \3 \3 \3!\3!\3!\3!\7!\u0208")
        buf.write('\n!\f!\16!\u020b\13!\5!\u020d\n!\3!\3!\3"\3"\5"\u0213')
        buf.write('\n"\3"\5"\u0216\n"\3#\3#\3#\3#\7#\u021c\n#\f#\16#')
        buf.write("\u021f\13#\5#\u0221\n#\3#\3#\3$\3$\5$\u0227\n$\3$\5$\u022a")
        buf.write("\n$\3%\3%\3%\3%\7%\u0230\n%\f%\16%\u0233\13%\5%\u0235")
        buf.write("\n%\3%\3%\3&\3&\5&\u023b\n&\3'\3'\5'\u023f\n'\3'")
        buf.write("\3'\3(\3(\3(\3(\3(\3(\3(\5(\u024a\n(\3(\3(\3(\5(\u024f")
        buf.write("\n(\3(\7(\u0252\n(\f(\16(\u0255\13(\3)\3)\3)\7)\u025a")
        buf.write("\n)\f)\16)\u025d\13)\3*\3*\5*\u0261\n*\3+\3+\3+\3+\5+")
        buf.write("\u0267\n+\3+\3+\3+\5+\u026c\n+\3+\3+\3,\3,\3-\3-\3.\3")
        buf.write(".\3.\3.\3.\7.\u0279\n.\f.\16.\u027c\13.\3.\3.\5.\u0280")
        buf.write("\n.\3/\3/\3\60\3\60\3\61\3\61\7\61\u0288\n\61\f\61\16")
        buf.write("\61\u028b\13\61\3\61\3\61\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u029e")
        buf.write("\n\62\3\63\3\63\3\63\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\5\64\u02aa\n\64\3\65\3\65\3\65\5\65\u02af\n\65\3\65\3")
        buf.write("\65\6\65\u02b3\n\65\r\65\16\65\u02b4\3\66\3\66\5\66\u02b9")
        buf.write("\n\66\3\66\5\66\u02bc\n\66\3\66\3\66\3\67\3\67\3\67\3")
        buf.write("\67\3\67\3\67\38\38\58\u02c8\n8\39\39\39\3:\3:\3:\3:\5")
        buf.write(":\u02d1\n:\3:\3:\5:\u02d5\n:\3:\5:\u02d8\n:\3:\3:\3:\3")
        buf.write(";\3;\5;\u02df\n;\3;\3;\3;\3;\5;\u02e5\n;\3;\3;\3<\3<\3")
        buf.write("=\3=\3=\3=\3=\3=\3=\3=\3>\3>\3>\3?\3?\3?\3@\3@\5@\u02fb")
        buf.write("\n@\3@\3@\3A\3A\3A\3B\3B\3B\3B\3C\3C\3C\3C\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\5D\u0311\nD\3D\3D\5D\u0315\nD\3D\3D\3E\5E\u031a")
        buf.write("\nE\3E\3E\5E\u031e\nE\7E\u0320\nE\fE\16E\u0323\13E\3F")
        buf.write("\3F\5F\u0327\nF\3F\7F\u032a\nF\fF\16F\u032d\13F\3F\5F")
        buf.write("\u0330\nF\3F\3F\3G\3G\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3")
        buf.write("H\3H\3H\3H\3H\3H\3H\3H\5H\u0348\nH\3H\3H\3H\3H\3H\3H\3")
        buf.write("H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3")
        buf.write("H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3")
        buf.write("H\3H\3H\3H\3H\3H\3H\3H\3H\3H\5H\u037e\nH\3H\3H\5H\u0382")
        buf.write("\nH\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\7H\u0392")
        buf.write("\nH\fH\16H\u0395\13H\3I\3I\3I\3I\3I\3I\3I\3I\3I\5I\u03a0")
        buf.write("\nI\3J\3J\3J\7J\u03a5\nJ\fJ\16J\u03a8\13J\3K\3K\3K\7K")
        buf.write("\u03ad\nK\fK\16K\u03b0\13K\3K\5K\u03b3\nK\3L\3L\3L\3L")
        buf.write("\3M\3M\5M\u03bb\nM\3M\3M\5M\u03bf\nM\5M\u03c1\nM\3N\3")
        buf.write("N\3N\3N\3N\3O\3O\7O\u03ca\nO\fO\16O\u03cd\13O\3O\3O\3")
        buf.write("P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\5P\u03e2")
        buf.write("\nP\3Q\3Q\3Q\5Q\u03e7\nQ\3R\3R\3R\3R\3S\3S\3S\3S\5S\u03f1")
        buf.write("\nS\3S\3S\5S\u03f5\nS\3S\3S\7S\u03f9\nS\fS\16S\u03fc\13")
        buf.write("S\3S\5S\u03ff\nS\3T\3T\3T\3T\5T\u0405\nT\3U\3U\3U\3U\3")
        buf.write("V\3V\3V\3V\3V\3V\3V\5V\u0412\nV\3W\3W\3W\7W\u0417\nW\f")
        buf.write("W\16W\u041a\13W\3X\3X\3X\3X\3Y\3Y\3Y\3Z\3Z\3Z\7Z\u0426")
        buf.write("\nZ\fZ\16Z\u0429\13Z\3[\3[\3[\3[\3[\3[\5[\u0431\n[\3\\")
        buf.write("\3\\\3\\\3\\\5\\\u0437\n\\\3\\\3\\\5\\\u043b\n\\\3\\\3")
        buf.write("\\\3]\3]\3]\3^\3^\3^\5^\u0445\n^\3^\3^\3^\5^\u044a\n^")
        buf.write("\3^\3^\3_\3_\3_\3_\3`\3`\3`\3`\3`\5`\u0457\n`\3a\3a\5")
        buf.write("a\u045b\na\3a\3a\5a\u045f\na\7a\u0461\na\fa\16a\u0464")
        buf.write("\13a\3a\3a\3a\3a\3a\7a\u046b\na\fa\16a\u046e\13a\5a\u0470")
        buf.write("\na\3a\5a\u0473\na\3b\3b\5b\u0477\nb\3c\3c\3d\6d\u047c")
        buf.write("\nd\rd\16d\u047d\3e\3e\3e\3e\3e\7e\u0485\ne\fe\16e\u0488")
        buf.write("\13e\3e\3e\5e\u048c\ne\3f\6f\u048f\nf\rf\16f\u0490\3f")
        buf.write('\2\4N\u008eg\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 "')
        buf.write("$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz")
        buf.write("|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4")
        buf.write("\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6")
        buf.write("\u00c8\u00ca\2\21\3\2\7\r\3\2\25\27\5\2\5\5\7\f\36%\3")
        buf.write('\2\62\64\6\2ppww{{}}\5\2..ADcg\3\2EF\3\2 !\4\2\5\5"#')
        buf.write("\3\2LM\3\2\t\f\3\2$%\4\2\r\rPY\3\2ij\f\2\20\20\33\33.")
        buf.write(".\64\64@@aassww~\177\u0081\u0082\2\u0513\2\u00d8\3\2\2")
        buf.write("\2\4\u00dd\3\2\2\2\6\u00e2\3\2\2\2\b\u00e7\3\2\2\2\n\u00e9")
        buf.write("\3\2\2\2\f\u00f3\3\2\2\2\16\u00fd\3\2\2\2\20\u00ff\3\2")
        buf.write("\2\2\22\u0128\3\2\2\2\24\u012a\3\2\2\2\26\u012d\3\2\2")
        buf.write("\2\30\u0145\3\2\2\2\32\u0156\3\2\2\2\34\u0158\3\2\2\2")
        buf.write('\36\u016b\3\2\2\2 \u0172\3\2\2\2"\u0177\3\2\2\2$\u017d')
        buf.write("\3\2\2\2&\u0195\3\2\2\2(\u0197\3\2\2\2*\u019c\3\2\2\2")
        buf.write(",\u019e\3\2\2\2.\u01af\3\2\2\2\60\u01bf\3\2\2\2\62\u01c7")
        buf.write("\3\2\2\2\64\u01d8\3\2\2\2\66\u01da\3\2\2\28\u01e7\3\2")
        buf.write("\2\2:\u01ea\3\2\2\2<\u01f2\3\2\2\2>\u01f4\3\2\2\2@\u0203")
        buf.write("\3\2\2\2B\u0210\3\2\2\2D\u0217\3\2\2\2F\u0224\3\2\2\2")
        buf.write("H\u022b\3\2\2\2J\u0238\3\2\2\2L\u023c\3\2\2\2N\u0249\3")
        buf.write("\2\2\2P\u0256\3\2\2\2R\u0260\3\2\2\2T\u0262\3\2\2\2V\u026f")
        buf.write("\3\2\2\2X\u0271\3\2\2\2Z\u0273\3\2\2\2\\\u0281\3\2\2\2")
        buf.write("^\u0283\3\2\2\2`\u0285\3\2\2\2b\u029d\3\2\2\2d\u029f\3")
        buf.write("\2\2\2f\u02a2\3\2\2\2h\u02ab\3\2\2\2j\u02b6\3\2\2\2l\u02bf")
        buf.write("\3\2\2\2n\u02c7\3\2\2\2p\u02c9\3\2\2\2r\u02cc\3\2\2\2")
        buf.write("t\u02dc\3\2\2\2v\u02e8\3\2\2\2x\u02ea\3\2\2\2z\u02f2\3")
        buf.write("\2\2\2|\u02f5\3\2\2\2~\u02f8\3\2\2\2\u0080\u02fe\3\2\2")
        buf.write("\2\u0082\u0301\3\2\2\2\u0084\u0305\3\2\2\2\u0086\u0310")
        buf.write("\3\2\2\2\u0088\u0319\3\2\2\2\u008a\u0324\3\2\2\2\u008c")
        buf.write("\u0333\3\2\2\2\u008e\u0347\3\2\2\2\u0090\u039f\3\2\2\2")
        buf.write("\u0092\u03a1\3\2\2\2\u0094\u03a9\3\2\2\2\u0096\u03b4\3")
        buf.write("\2\2\2\u0098\u03c0\3\2\2\2\u009a\u03c2\3\2\2\2\u009c\u03c7")
        buf.write("\3\2\2\2\u009e\u03e1\3\2\2\2\u00a0\u03e6\3\2\2\2\u00a2")
        buf.write("\u03e8\3\2\2\2\u00a4\u03f0\3\2\2\2\u00a6\u0400\3\2\2\2")
        buf.write("\u00a8\u0406\3\2\2\2\u00aa\u0411\3\2\2\2\u00ac\u0413\3")
        buf.write("\2\2\2\u00ae\u041b\3\2\2\2\u00b0\u041f\3\2\2\2\u00b2\u0422")
        buf.write("\3\2\2\2\u00b4\u0430\3\2\2\2\u00b6\u0432\3\2\2\2\u00b8")
        buf.write("\u043e\3\2\2\2\u00ba\u0441\3\2\2\2\u00bc\u044d\3\2\2\2")
        buf.write("\u00be\u0456\3\2\2\2\u00c0\u0472\3\2\2\2\u00c2\u0474\3")
        buf.write("\2\2\2\u00c4\u0478\3\2\2\2\u00c6\u047b\3\2\2\2\u00c8\u047f")
        buf.write("\3\2\2\2\u00ca\u048e\3\2\2\2\u00cc\u00d7\5\4\3\2\u00cd")
        buf.write("\u00d7\5\22\n\2\u00ce\u00d7\5\26\f\2\u00cf\u00d7\5> \2")
        buf.write("\u00d0\u00d7\5,\27\2\u00d1\u00d7\5\62\32\2\u00d2\u00d7")
        buf.write('\5\36\20\2\u00d3\u00d7\5 \21\2\u00d4\u00d7\5"\22\2\u00d5')
        buf.write("\u00d7\5$\23\2\u00d6\u00cc\3\2\2\2\u00d6\u00cd\3\2\2\2")
        buf.write("\u00d6\u00ce\3\2\2\2\u00d6\u00cf\3\2\2\2\u00d6\u00d0\3")
        buf.write("\2\2\2\u00d6\u00d1\3\2\2\2\u00d6\u00d2\3\2\2\2\u00d6\u00d3")
        buf.write("\3\2\2\2\u00d6\u00d4\3\2\2\2\u00d6\u00d5\3\2\2\2\u00d7")
        buf.write("\u00da\3\2\2\2\u00d8\u00d6\3\2\2\2\u00d8\u00d9\3\2\2\2")
        buf.write("\u00d9\u00db\3\2\2\2\u00da\u00d8\3\2\2\2\u00db\u00dc\7")
        buf.write("\2\2\3\u00dc\3\3\2\2\2\u00dd\u00de\7\3\2\2\u00de\u00df")
        buf.write("\5\6\4\2\u00df\u00e0\5\b\5\2\u00e0\u00e1\7\4\2\2\u00e1")
        buf.write("\5\3\2\2\2\u00e2\u00e3\5\u00c4c\2\u00e3\7\3\2\2\2\u00e4")
        buf.write("\u00e8\7\5\2\2\u00e5\u00e8\5\n\6\2\u00e6\u00e8\5\u008e")
        buf.write("H\2\u00e7\u00e4\3\2\2\2\u00e7\u00e5\3\2\2\2\u00e7\u00e6")
        buf.write("\3\2\2\2\u00e8\t\3\2\2\2\u00e9\u00f0\5\16\b\2\u00ea\u00ec")
        buf.write("\7\6\2\2\u00eb\u00ea\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec")
        buf.write("\u00ed\3\2\2\2\u00ed\u00ef\5\16\b\2\u00ee\u00eb\3\2\2")
        buf.write("\2\u00ef\u00f2\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f0\u00f1")
        buf.write("\3\2\2\2\u00f1\13\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f3\u00f4")
        buf.write("\t\2\2\2\u00f4\r\3\2\2\2\u00f5\u00f7\5\f\7\2\u00f6\u00f5")
        buf.write("\3\2\2\2\u00f6\u00f7\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8")
        buf.write("\u00fe\7\u0084\2\2\u00f9\u00fb\5\f\7\2\u00fa\u00f9\3\2")
        buf.write("\2\2\u00fa\u00fb\3\2\2\2\u00fb\u00fc\3\2\2\2\u00fc\u00fe")
        buf.write("\7i\2\2\u00fd\u00f6\3\2\2\2\u00fd\u00fa\3\2\2\2\u00fe")
        buf.write("\17\3\2\2\2\u00ff\u0102\5\u00c4c\2\u0100\u0101\7\16\2")
        buf.write("\2\u0101\u0103\5\u00c4c\2\u0102\u0100\3\2\2\2\u0102\u0103")
        buf.write("\3\2\2\2\u0103\21\3\2\2\2\u0104\u0105\7\17\2\2\u0105\u0108")
        buf.write("\5\24\13\2\u0106\u0107\7\16\2\2\u0107\u0109\5\u00c4c\2")
        buf.write("\u0108\u0106\3\2\2\2\u0108\u0109\3\2\2\2\u0109\u010a\3")
        buf.write("\2\2\2\u010a\u010b\7\4\2\2\u010b\u0129\3\2\2\2\u010c\u010f")
        buf.write("\7\17\2\2\u010d\u0110\7\5\2\2\u010e\u0110\5\u00c4c\2\u010f")
        buf.write("\u010d\3\2\2\2\u010f\u010e\3\2\2\2\u0110\u0113\3\2\2\2")
        buf.write("\u0111\u0112\7\16\2\2\u0112\u0114\5\u00c4c\2\u0113\u0111")
        buf.write("\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u0115\3\2\2\2\u0115")
        buf.write("\u0116\7\20\2\2\u0116\u0117\5\24\13\2\u0117\u0118\7\4")
        buf.write("\2\2\u0118\u0129\3\2\2\2\u0119\u011a\7\17\2\2\u011a\u011b")
        buf.write("\7\21\2\2\u011b\u0120\5\20\t\2\u011c\u011d\7\22\2\2\u011d")
        buf.write("\u011f\5\20\t\2\u011e\u011c\3\2\2\2\u011f\u0122\3\2\2")
        buf.write("\2\u0120\u011e\3\2\2\2\u0120\u0121\3\2\2\2\u0121\u0123")
        buf.write("\3\2\2\2\u0122\u0120\3\2\2\2\u0123\u0124\7\23\2\2\u0124")
        buf.write("\u0125\7\20\2\2\u0125\u0126\5\24\13\2\u0126\u0127\7\4")
        buf.write("\2\2\u0127\u0129\3\2\2\2\u0128\u0104\3\2\2\2\u0128\u010c")
        buf.write("\3\2\2\2\u0128\u0119\3\2\2\2\u0129\23\3\2\2\2\u012a\u012b")
        buf.write("\7\u0083\2\2\u012b\25\3\2\2\2\u012c\u012e\7\24\2\2\u012d")
        buf.write("\u012c\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u012f\3\2\2\2")
        buf.write("\u012f\u0130\t\3\2\2\u0130\u013a\5\u00c4c\2\u0131\u0132")
        buf.write("\7\30\2\2\u0132\u0137\5\30\r\2\u0133\u0134\7\22\2\2\u0134")
        buf.write("\u0136\5\30\r\2\u0135\u0133\3\2\2\2\u0136\u0139\3\2\2")
        buf.write("\2\u0137\u0135\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u013b")
        buf.write("\3\2\2\2\u0139\u0137\3\2\2\2\u013a\u0131\3\2\2\2\u013a")
        buf.write("\u013b\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u0140\7\21\2")
        buf.write("\2\u013d\u013f\5\32\16\2\u013e\u013d\3\2\2\2\u013f\u0142")
        buf.write("\3\2\2\2\u0140\u013e\3\2\2\2\u0140\u0141\3\2\2\2\u0141")
        buf.write("\u0143\3\2\2\2\u0142\u0140\3\2\2\2\u0143\u0144\7\23\2")
        buf.write("\2\u0144\27\3\2\2\2\u0145\u014b\5P)\2\u0146\u0148\7\31")
        buf.write("\2\2\u0147\u0149\5\u0092J\2\u0148\u0147\3\2\2\2\u0148")
        buf.write("\u0149\3\2\2\2\u0149\u014a\3\2\2\2\u014a\u014c\7\32\2")
        buf.write("\2\u014b\u0146\3\2\2\2\u014b\u014c\3\2\2\2\u014c\31\3")
        buf.write("\2\2\2\u014d\u0157\5\34\17\2\u014e\u0157\5$\23\2\u014f")
        buf.write("\u0157\5,\27\2\u0150\u0157\5.\30\2\u0151\u0157\5\62\32")
        buf.write("\2\u0152\u0157\5:\36\2\u0153\u0157\5> \2\u0154\u0157\5")
        buf.write(' \21\2\u0155\u0157\5"\22\2\u0156\u014d\3\2\2\2\u0156')
        buf.write("\u014e\3\2\2\2\u0156\u014f\3\2\2\2\u0156\u0150\3\2\2\2")
        buf.write("\u0156\u0151\3\2\2\2\u0156\u0152\3\2\2\2\u0156\u0153\3")
        buf.write("\2\2\2\u0156\u0154\3\2\2\2\u0156\u0155\3\2\2\2\u0157\33")
        buf.write("\3\2\2\2\u0158\u0161\5N(\2\u0159\u0160\7y\2\2\u015a\u0160")
        buf.write("\7v\2\2\u015b\u0160\7x\2\2\u015c\u0160\7p\2\2\u015d\u0160")
        buf.write("\7q\2\2\u015e\u0160\5\u00c8e\2\u015f\u0159\3\2\2\2\u015f")
        buf.write("\u015a\3\2\2\2\u015f\u015b\3\2\2\2\u015f\u015c\3\2\2\2")
        buf.write("\u015f\u015d\3\2\2\2\u015f\u015e\3\2\2\2\u0160\u0163\3")
        buf.write("\2\2\2\u0161\u015f\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0164")
        buf.write("\3\2\2\2\u0163\u0161\3\2\2\2\u0164\u0167\5\u00c4c\2\u0165")
        buf.write("\u0166\7\r\2\2\u0166\u0168\5\u008eH\2\u0167\u0165\3\2")
        buf.write("\2\2\u0167\u0168\3\2\2\2\u0168\u0169\3\2\2\2\u0169\u016a")
        buf.write("\7\4\2\2\u016a\35\3\2\2\2\u016b\u016c\5N(\2\u016c\u016d")
        buf.write("\7p\2\2\u016d\u016e\5\u00c4c\2\u016e\u016f\7\r\2\2\u016f")
        buf.write("\u0170\5\u008eH\2\u0170\u0171\7\4\2\2\u0171\37\3\2\2\2")
        buf.write("\u0172\u0173\7\33\2\2\u0173\u0174\5\u00c4c\2\u0174\u0175")
        buf.write("\5@!\2\u0175\u0176\7\4\2\2\u0176!\3\2\2\2\u0177\u0178")
        buf.write("\7|\2\2\u0178\u0179\5\u00c4c\2\u0179\u017a\7\30\2\2\u017a")
        buf.write("\u017b\5\u008cG\2\u017b\u017c\7\4\2\2\u017c#\3\2\2\2\u017d")
        buf.write("\u017e\7\34\2\2\u017e\u017f\5&\24\2\u017f\u0182\7\35\2")
        buf.write("\2\u0180\u0183\7\5\2\2\u0181\u0183\5N(\2\u0182\u0180\3")
        buf.write("\2\2\2\u0182\u0181\3\2\2\2\u0183\u0185\3\2\2\2\u0184\u0186")
        buf.write("\7~\2\2\u0185\u0184\3\2\2\2\u0185\u0186\3\2\2\2\u0186")
        buf.write("\u0187\3\2\2\2\u0187\u0188\7\4\2\2\u0188%\3\2\2\2\u0189")
        buf.write("\u0196\5P)\2\u018a\u018b\7\21\2\2\u018b\u0190\5(\25\2")
        buf.write("\u018c\u018d\7\22\2\2\u018d\u018f\5(\25\2\u018e\u018c")
        buf.write("\3\2\2\2\u018f\u0192\3\2\2\2\u0190\u018e\3\2\2\2\u0190")
        buf.write("\u0191\3\2\2\2\u0191\u0193\3\2\2\2\u0192\u0190\3\2\2\2")
        buf.write("\u0193\u0194\7\23\2\2\u0194\u0196\3\2\2\2\u0195\u0189")
        buf.write("\3\2\2\2\u0195\u018a\3\2\2\2\u0196'\3\2\2\2\u0197\u019a")
        buf.write("\5P)\2\u0198\u0199\7\16\2\2\u0199\u019b\5*\26\2\u019a")
        buf.write("\u0198\3\2\2\2\u019a\u019b\3\2\2\2\u019b)\3\2\2\2\u019c")
        buf.write("\u019d\t\4\2\2\u019d+\3\2\2\2\u019e\u019f\7&\2\2\u019f")
        buf.write("\u01a0\5\u00c4c\2\u01a0\u01ab\7\21\2\2\u01a1\u01a2\5L")
        buf.write("'\2\u01a2\u01a8\7\4\2\2\u01a3\u01a4\5L'\2\u01a4\u01a5")
        buf.write("\7\4\2\2\u01a5\u01a7\3\2\2\2\u01a6\u01a3\3\2\2\2\u01a7")
        buf.write("\u01aa\3\2\2\2\u01a8\u01a6\3\2\2\2\u01a8\u01a9\3\2\2\2")
        buf.write("\u01a9\u01ac\3\2\2\2\u01aa\u01a8\3\2\2\2\u01ab\u01a1\3")
        buf.write("\2\2\2\u01ab\u01ac\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01ae")
        buf.write("\7\23\2\2\u01ae-\3\2\2\2\u01af\u01b0\7'\2\2\u01b0\u01b2")
        buf.write("\5\u00c4c\2\u01b1\u01b3\5@!\2\u01b2\u01b1\3\2\2\2\u01b2")
        buf.write("\u01b3\3\2\2\2\u01b3\u01b8\3\2\2\2\u01b4\u01b7\7z\2\2")
        buf.write("\u01b5\u01b7\5\u00c8e\2\u01b6\u01b4\3\2\2\2\u01b6\u01b5")
        buf.write("\3\2\2\2\u01b7\u01ba\3\2\2\2\u01b8\u01b6\3\2\2\2\u01b8")
        buf.write("\u01b9\3\2\2\2\u01b9\u01bd\3\2\2\2\u01ba\u01b8\3\2\2\2")
        buf.write("\u01bb\u01be\7\4\2\2\u01bc\u01be\5`\61\2\u01bd\u01bb\3")
        buf.write("\2\2\2\u01bd\u01bc\3\2\2\2\u01be/\3\2\2\2\u01bf\u01c5")
        buf.write("\5\u00c4c\2\u01c0\u01c2\7\31\2\2\u01c1\u01c3\5\u0092J")
        buf.write("\2\u01c2\u01c1\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c4")
        buf.write("\3\2\2\2\u01c4\u01c6\7\32\2\2\u01c5\u01c0\3\2\2\2\u01c5")
        buf.write("\u01c6\3\2\2\2\u01c6\61\3\2\2\2\u01c7\u01c8\5\64\33\2")
        buf.write("\u01c8\u01c9\5@!\2\u01c9\u01cb\58\35\2\u01ca\u01cc\5\66")
        buf.write("\34\2\u01cb\u01ca\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01cf")
        buf.write("\3\2\2\2\u01cd\u01d0\7\4\2\2\u01ce\u01d0\5`\61\2\u01cf")
        buf.write("\u01cd\3\2\2\2\u01cf\u01ce\3\2\2\2\u01d0\63\3\2\2\2\u01d1")
        buf.write("\u01d3\7(\2\2\u01d2\u01d4\5\u00c4c\2\u01d3\u01d2\3\2\2")
        buf.write("\2\u01d3\u01d4\3\2\2\2\u01d4\u01d9\3\2\2\2\u01d5\u01d9")
        buf.write("\7\177\2\2\u01d6\u01d9\7\u0080\2\2\u01d7\u01d9\7\u0081")
        buf.write("\2\2\u01d8\u01d1\3\2\2\2\u01d8\u01d5\3\2\2\2\u01d8\u01d6")
        buf.write("\3\2\2\2\u01d8\u01d7\3\2\2\2\u01d9\65\3\2\2\2\u01da\u01db")
        buf.write("\7)\2\2\u01db\u01dc\5@!\2\u01dc\67\3\2\2\2\u01dd\u01e6")
        buf.write("\7t\2\2\u01de\u01e6\7y\2\2\u01df\u01e6\7v\2\2\u01e0\u01e6")
        buf.write("\7x\2\2\u01e1\u01e6\7z\2\2\u01e2\u01e6\5^\60\2\u01e3\u01e6")
        buf.write("\5\60\31\2\u01e4\u01e6\5\u00c8e\2\u01e5\u01dd\3\2\2\2")
        buf.write("\u01e5\u01de\3\2\2\2\u01e5\u01df\3\2\2\2\u01e5\u01e0\3")
        buf.write("\2\2\2\u01e5\u01e1\3\2\2\2\u01e5\u01e2\3\2\2\2\u01e5\u01e3")
        buf.write("\3\2\2\2\u01e5\u01e4\3\2\2\2\u01e6\u01e9\3\2\2\2\u01e7")
        buf.write("\u01e5\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e89\3\2\2\2\u01e9")
        buf.write("\u01e7\3\2\2\2\u01ea\u01eb\7*\2\2\u01eb\u01ec\5\u00c4")
        buf.write("c\2\u01ec\u01ee\5D#\2\u01ed\u01ef\7n\2\2\u01ee\u01ed\3")
        buf.write("\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f1")
        buf.write("\7\4\2\2\u01f1;\3\2\2\2\u01f2\u01f3\5\u00c4c\2\u01f3=")
        buf.write("\3\2\2\2\u01f4\u01f5\7+\2\2\u01f5\u01f6\5\u00c4c\2\u01f6")
        buf.write("\u01f8\7\21\2\2\u01f7\u01f9\5<\37\2\u01f8\u01f7\3\2\2")
        buf.write("\2\u01f8\u01f9\3\2\2\2\u01f9\u01fe\3\2\2\2\u01fa\u01fb")
        buf.write("\7\22\2\2\u01fb\u01fd\5<\37\2\u01fc\u01fa\3\2\2\2\u01fd")
        buf.write("\u0200\3\2\2\2\u01fe\u01fc\3\2\2\2\u01fe\u01ff\3\2\2\2")
        buf.write("\u01ff\u0201\3\2\2\2\u0200\u01fe\3\2\2\2\u0201\u0202\7")
        buf.write("\23\2\2\u0202?\3\2\2\2\u0203\u020c\7\31\2\2\u0204\u0209")
        buf.write('\5B"\2\u0205\u0206\7\22\2\2\u0206\u0208\5B"\2\u0207')
        buf.write("\u0205\3\2\2\2\u0208\u020b\3\2\2\2\u0209\u0207\3\2\2\2")
        buf.write("\u0209\u020a\3\2\2\2\u020a\u020d\3\2\2\2\u020b\u0209\3")
        buf.write("\2\2\2\u020c\u0204\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u020e")
        buf.write("\3\2\2\2\u020e\u020f\7\32\2\2\u020fA\3\2\2\2\u0210\u0212")
        buf.write("\5N(\2\u0211\u0213\5\\/\2\u0212\u0211\3\2\2\2\u0212\u0213")
        buf.write("\3\2\2\2\u0213\u0215\3\2\2\2\u0214\u0216\5\u00c4c\2\u0215")
        buf.write("\u0214\3\2\2\2\u0215\u0216\3\2\2\2\u0216C\3\2\2\2\u0217")
        buf.write("\u0220\7\31\2\2\u0218\u021d\5F$\2\u0219\u021a\7\22\2\2")
        buf.write("\u021a\u021c\5F$\2\u021b\u0219\3\2\2\2\u021c\u021f\3\2")
        buf.write("\2\2\u021d\u021b\3\2\2\2\u021d\u021e\3\2\2\2\u021e\u0221")
        buf.write("\3\2\2\2\u021f\u021d\3\2\2\2\u0220\u0218\3\2\2\2\u0220")
        buf.write("\u0221\3\2\2\2\u0221\u0222\3\2\2\2\u0222\u0223\7\32\2")
        buf.write("\2\u0223E\3\2\2\2\u0224\u0226\5N(\2\u0225\u0227\7u\2\2")
        buf.write("\u0226\u0225\3\2\2\2\u0226\u0227\3\2\2\2\u0227\u0229\3")
        buf.write("\2\2\2\u0228\u022a\5\u00c4c\2\u0229\u0228\3\2\2\2\u0229")
        buf.write("\u022a\3\2\2\2\u022aG\3\2\2\2\u022b\u0234\7\31\2\2\u022c")
        buf.write("\u0231\5J&\2\u022d\u022e\7\22\2\2\u022e\u0230\5J&\2\u022f")
        buf.write("\u022d\3\2\2\2\u0230\u0233\3\2\2\2\u0231\u022f\3\2\2\2")
        buf.write("\u0231\u0232\3\2\2\2\u0232\u0235\3\2\2\2\u0233\u0231\3")
        buf.write("\2\2\2\u0234\u022c\3\2\2\2\u0234\u0235\3\2\2\2\u0235\u0236")
        buf.write("\3\2\2\2\u0236\u0237\7\32\2\2\u0237I\3\2\2\2\u0238\u023a")
        buf.write("\5N(\2\u0239\u023b\5\\/\2\u023a\u0239\3\2\2\2\u023a\u023b")
        buf.write("\3\2\2\2\u023bK\3\2\2\2\u023c\u023e\5N(\2\u023d\u023f")
        buf.write("\5\\/\2\u023e\u023d\3\2\2\2\u023e\u023f\3\2\2\2\u023f")
        buf.write("\u0240\3\2\2\2\u0240\u0241\5\u00c4c\2\u0241M\3\2\2\2\u0242")
        buf.write("\u0243\b(\1\2\u0243\u024a\5\u008cG\2\u0244\u024a\5P)\2")
        buf.write("\u0245\u024a\5T+\2\u0246\u024a\5Z.\2\u0247\u0248\7.\2")
        buf.write("\2\u0248\u024a\7w\2\2\u0249\u0242\3\2\2\2\u0249\u0244")
        buf.write("\3\2\2\2\u0249\u0245\3\2\2\2\u0249\u0246\3\2\2\2\u0249")
        buf.write("\u0247\3\2\2\2\u024a\u0253\3\2\2\2\u024b\u024c\f\5\2\2")
        buf.write("\u024c\u024e\7,\2\2\u024d\u024f\5\u008eH\2\u024e\u024d")
        buf.write("\3\2\2\2\u024e\u024f\3\2\2\2\u024f\u0250\3\2\2\2\u0250")
        buf.write("\u0252\7-\2\2\u0251\u024b\3\2\2\2\u0252\u0255\3\2\2\2")
        buf.write("\u0253\u0251\3\2\2\2\u0253\u0254\3\2\2\2\u0254O\3\2\2")
        buf.write("\2\u0255\u0253\3\2\2\2\u0256\u025b\5\u00c4c\2\u0257\u0258")
        buf.write("\7/\2\2\u0258\u025a\5\u00c4c\2\u0259\u0257\3\2\2\2\u025a")
        buf.write("\u025d\3\2\2\2\u025b\u0259\3\2\2\2\u025b\u025c\3\2\2\2")
        buf.write("\u025cQ\3\2\2\2\u025d\u025b\3\2\2\2\u025e\u0261\5\u008c")
        buf.write("G\2\u025f\u0261\5P)\2\u0260\u025e\3\2\2\2\u0260\u025f")
        buf.write("\3\2\2\2\u0261S\3\2\2\2\u0262\u0263\7\60\2\2\u0263\u0264")
        buf.write("\7\31\2\2\u0264\u0266\5R*\2\u0265\u0267\5V,\2\u0266\u0265")
        buf.write("\3\2\2\2\u0266\u0267\3\2\2\2\u0267\u0268\3\2\2\2\u0268")
        buf.write("\u0269\7\61\2\2\u0269\u026b\5N(\2\u026a\u026c\5X-\2\u026b")
        buf.write("\u026a\3\2\2\2\u026b\u026c\3\2\2\2\u026c\u026d\3\2\2\2")
        buf.write("\u026d\u026e\7\32\2\2\u026eU\3\2\2\2\u026f\u0270\5\u00c4")
        buf.write("c\2\u0270W\3\2\2\2\u0271\u0272\5\u00c4c\2\u0272Y\3\2\2")
        buf.write("\2\u0273\u0274\7(\2\2\u0274\u027a\5H%\2\u0275\u0279\7")
        buf.write("v\2\2\u0276\u0279\7t\2\2\u0277\u0279\5^\60\2\u0278\u0275")
        buf.write("\3\2\2\2\u0278\u0276\3\2\2\2\u0278\u0277\3\2\2\2\u0279")
        buf.write("\u027c\3\2\2\2\u027a\u0278\3\2\2\2\u027a\u027b\3\2\2\2")
        buf.write("\u027b\u027f\3\2\2\2\u027c\u027a\3\2\2\2\u027d\u027e\7")
        buf.write(")\2\2\u027e\u0280\5H%\2\u027f\u027d\3\2\2\2\u027f\u0280")
        buf.write("\3\2\2\2\u0280[\3\2\2\2\u0281\u0282\t\5\2\2\u0282]\3\2")
        buf.write("\2\2\u0283\u0284\t\6\2\2\u0284_\3\2\2\2\u0285\u0289\7")
        buf.write("\21\2\2\u0286\u0288\5b\62\2\u0287\u0286\3\2\2\2\u0288")
        buf.write("\u028b\3\2\2\2\u0289\u0287\3\2\2\2\u0289\u028a\3\2\2\2")
        buf.write("\u028a\u028c\3\2\2\2\u028b\u0289\3\2\2\2\u028c\u028d\7")
        buf.write("\23\2\2\u028da\3\2\2\2\u028e\u029e\5f\64\2\u028f\u029e")
        buf.write("\5h\65\2\u0290\u029e\5l\67\2\u0291\u029e\5r:\2\u0292\u029e")
        buf.write("\5`\61\2\u0293\u029e\5t;\2\u0294\u029e\5x=\2\u0295\u029e")
        buf.write("\5z>\2\u0296\u029e\5|?\2\u0297\u029e\5~@\2\u0298\u029e")
        buf.write("\5\u0080A\2\u0299\u029e\5\u0082B\2\u029a\u029e\5n8\2\u029b")
        buf.write("\u029e\5p9\2\u029c\u029e\5\u0084C\2\u029d\u028e\3\2\2")
        buf.write("\2\u029d\u028f\3\2\2\2\u029d\u0290\3\2\2\2\u029d\u0291")
        buf.write("\3\2\2\2\u029d\u0292\3\2\2\2\u029d\u0293\3\2\2\2\u029d")
        buf.write("\u0294\3\2\2\2\u029d\u0295\3\2\2\2\u029d\u0296\3\2\2\2")
        buf.write("\u029d\u0297\3\2\2\2\u029d\u0298\3\2\2\2\u029d\u0299\3")
        buf.write("\2\2\2\u029d\u029a\3\2\2\2\u029d\u029b\3\2\2\2\u029d\u029c")
        buf.write("\3\2\2\2\u029ec\3\2\2\2\u029f\u02a0\5\u008eH\2\u02a0\u02a1")
        buf.write("\7\4\2\2\u02a1e\3\2\2\2\u02a2\u02a3\7\65\2\2\u02a3\u02a4")
        buf.write("\7\31\2\2\u02a4\u02a5\5\u008eH\2\u02a5\u02a6\7\32\2\2")
        buf.write("\u02a6\u02a9\5b\62\2\u02a7\u02a8\7\66\2\2\u02a8\u02aa")
        buf.write("\5b\62\2\u02a9\u02a7\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa")
        buf.write("g\3\2\2\2\u02ab\u02ac\7\67\2\2\u02ac\u02ae\5\u008eH\2")
        buf.write("\u02ad\u02af\5\66\34\2\u02ae\u02ad\3\2\2\2\u02ae\u02af")
        buf.write("\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b2\5`\61\2\u02b1")
        buf.write("\u02b3\5j\66\2\u02b2\u02b1\3\2\2\2\u02b3\u02b4\3\2\2\2")
        buf.write("\u02b4\u02b2\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5i\3\2\2")
        buf.write("\2\u02b6\u02bb\78\2\2\u02b7\u02b9\5\u00c4c\2\u02b8\u02b7")
        buf.write("\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba")
        buf.write("\u02bc\5@!\2\u02bb\u02b8\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc")
        buf.write("\u02bd\3\2\2\2\u02bd\u02be\5`\61\2\u02bek\3\2\2\2\u02bf")
        buf.write("\u02c0\79\2\2\u02c0\u02c1\7\31\2\2\u02c1\u02c2\5\u008e")
        buf.write("H\2\u02c2\u02c3\7\32\2\2\u02c3\u02c4\5b\62\2\u02c4m\3")
        buf.write("\2\2\2\u02c5\u02c8\5\u0086D\2\u02c6\u02c8\5d\63\2\u02c7")
        buf.write("\u02c5\3\2\2\2\u02c7\u02c6\3\2\2\2\u02c8o\3\2\2\2\u02c9")
        buf.write("\u02ca\7:\2\2\u02ca\u02cb\5`\61\2\u02cbq\3\2\2\2\u02cc")
        buf.write("\u02cd\7\35\2\2\u02cd\u02d0\7\31\2\2\u02ce\u02d1\5n8\2")
        buf.write("\u02cf\u02d1\7\4\2\2\u02d0\u02ce\3\2\2\2\u02d0\u02cf\3")
        buf.write("\2\2\2\u02d1\u02d4\3\2\2\2\u02d2\u02d5\5d\63\2\u02d3\u02d5")
        buf.write("\7\4\2\2\u02d4\u02d2\3\2\2\2\u02d4\u02d3\3\2\2\2\u02d5")
        buf.write("\u02d7\3\2\2\2\u02d6\u02d8\5\u008eH\2\u02d7\u02d6\3\2")
        buf.write("\2\2\u02d7\u02d8\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u02da")
        buf.write("\7\32\2\2\u02da\u02db\5b\62\2\u02dbs\3\2\2\2\u02dc\u02de")
        buf.write("\7;\2\2\u02dd\u02df\7\u0083\2\2\u02de\u02dd\3\2\2\2\u02de")
        buf.write("\u02df\3\2\2\2\u02df\u02e4\3\2\2\2\u02e0\u02e1\7\31\2")
        buf.write("\2\u02e1\u02e2\5v<\2\u02e2\u02e3\7\32\2\2\u02e3\u02e5")
        buf.write("\3\2\2\2\u02e4\u02e0\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5")
        buf.write("\u02e6\3\2\2\2\u02e6\u02e7\5\u009cO\2\u02e7u\3\2\2\2\u02e8")
        buf.write("\u02e9\5\u00caf\2\u02e9w\3\2\2\2\u02ea\u02eb\7<\2\2\u02eb")
        buf.write("\u02ec\5b\62\2\u02ec\u02ed\79\2\2\u02ed\u02ee\7\31\2\2")
        buf.write("\u02ee\u02ef\5\u008eH\2\u02ef\u02f0\7\32\2\2\u02f0\u02f1")
        buf.write("\7\4\2\2\u02f1y\3\2\2\2\u02f2\u02f3\7r\2\2\u02f3\u02f4")
        buf.write("\7\4\2\2\u02f4{\3\2\2\2\u02f5\u02f6\7o\2\2\u02f6\u02f7")
        buf.write("\7\4\2\2\u02f7}\3\2\2\2\u02f8\u02fa\7=\2\2\u02f9\u02fb")
        buf.write("\5\u008eH\2\u02fa\u02f9\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb")
        buf.write("\u02fc\3\2\2\2\u02fc\u02fd\7\4\2\2\u02fd\177\3\2\2\2\u02fe")
        buf.write("\u02ff\7>\2\2\u02ff\u0300\7\4\2\2\u0300\u0081\3\2\2\2")
        buf.write("\u0301\u0302\7?\2\2\u0302\u0303\5\u009aN\2\u0303\u0304")
        buf.write("\7\4\2\2\u0304\u0083\3\2\2\2\u0305\u0306\7@\2\2\u0306")
        buf.write("\u0307\5\u009aN\2\u0307\u0308\7\4\2\2\u0308\u0085\3\2")
        buf.write("\2\2\u0309\u030a\7A\2\2\u030a\u0311\5\u008aF\2\u030b\u0311")
        buf.write("\5L'\2\u030c\u030d\7\31\2\2\u030d\u030e\5\u0088E\2\u030e")
        buf.write("\u030f\7\32\2\2\u030f\u0311\3\2\2\2\u0310\u0309\3\2\2")
        buf.write("\2\u0310\u030b\3\2\2\2\u0310\u030c\3\2\2\2\u0311\u0314")
        buf.write("\3\2\2\2\u0312\u0313\7\r\2\2\u0313\u0315\5\u008eH\2\u0314")
        buf.write("\u0312\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0316\3\2\2\2")
        buf.write("\u0316\u0317\7\4\2\2\u0317\u0087\3\2\2\2\u0318\u031a\5")
        buf.write("L'\2\u0319\u0318\3\2\2\2\u0319\u031a\3\2\2\2\u031a\u0321")
        buf.write("\3\2\2\2\u031b\u031d\7\22\2\2\u031c\u031e\5L'\2\u031d")
        buf.write("\u031c\3\2\2\2\u031d\u031e\3\2\2\2\u031e\u0320\3\2\2\2")
        buf.write("\u031f\u031b\3\2\2\2\u0320\u0323\3\2\2\2\u0321\u031f\3")
        buf.write("\2\2\2\u0321\u0322\3\2\2\2\u0322\u0089\3\2\2\2\u0323\u0321")
        buf.write("\3\2\2\2\u0324\u032b\7\31\2\2\u0325\u0327\5\u00c4c\2\u0326")
        buf.write("\u0325\3\2\2\2\u0326\u0327\3\2\2\2\u0327\u0328\3\2\2\2")
        buf.write("\u0328\u032a\7\22\2\2\u0329\u0326\3\2\2\2\u032a\u032d")
        buf.write("\3\2\2\2\u032b\u0329\3\2\2\2\u032b\u032c\3\2\2\2\u032c")
        buf.write("\u032f\3\2\2\2\u032d\u032b\3\2\2\2\u032e\u0330\5\u00c4")
        buf.write("c\2\u032f\u032e\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0331")
        buf.write("\3\2\2\2\u0331\u0332\7\32\2\2\u0332\u008b\3\2\2\2\u0333")
        buf.write("\u0334\t\7\2\2\u0334\u008d\3\2\2\2\u0335\u0336\bH\1\2")
        buf.write("\u0336\u0337\7G\2\2\u0337\u0348\5N(\2\u0338\u0339\7\31")
        buf.write("\2\2\u0339\u033a\5\u008eH\2\u033a\u033b\7\32\2\2\u033b")
        buf.write("\u0348\3\2\2\2\u033c\u033d\t\b\2\2\u033d\u0348\5\u008e")
        buf.write("H\25\u033e\u033f\t\t\2\2\u033f\u0348\5\u008eH\24\u0340")
        buf.write("\u0341\7I\2\2\u0341\u0348\5\u008eH\23\u0342\u0343\7J\2")
        buf.write("\2\u0343\u0348\5\u008eH\22\u0344\u0345\7\b\2\2\u0345\u0348")
        buf.write("\5\u008eH\21\u0346\u0348\5\u0090I\2\u0347\u0335\3\2\2")
        buf.write("\2\u0347\u0338\3\2\2\2\u0347\u033c\3\2\2\2\u0347\u033e")
        buf.write("\3\2\2\2\u0347\u0340\3\2\2\2\u0347\u0342\3\2\2\2\u0347")
        buf.write("\u0344\3\2\2\2\u0347\u0346\3\2\2\2\u0348\u0393\3\2\2\2")
        buf.write("\u0349\u034a\f\20\2\2\u034a\u034b\7K\2\2\u034b\u0392\5")
        buf.write("\u008eH\21\u034c\u034d\f\17\2\2\u034d\u034e\t\n\2\2\u034e")
        buf.write("\u0392\5\u008eH\20\u034f\u0350\f\16\2\2\u0350\u0351\t")
        buf.write("\t\2\2\u0351\u0392\5\u008eH\17\u0352\u0353\f\r\2\2\u0353")
        buf.write("\u0354\t\13\2\2\u0354\u0392\5\u008eH\16\u0355\u0356\f")
        buf.write("\f\2\2\u0356\u0357\7\37\2\2\u0357\u0392\5\u008eH\r\u0358")
        buf.write("\u0359\f\13\2\2\u0359\u035a\7\7\2\2\u035a\u0392\5\u008e")
        buf.write("H\f\u035b\u035c\f\n\2\2\u035c\u035d\7\36\2\2\u035d\u0392")
        buf.write("\5\u008eH\13\u035e\u035f\f\t\2\2\u035f\u0360\t\f\2\2\u0360")
        buf.write("\u0392\5\u008eH\n\u0361\u0362\f\b\2\2\u0362\u0363\t\r")
        buf.write("\2\2\u0363\u0392\5\u008eH\t\u0364\u0365\f\7\2\2\u0365")
        buf.write("\u0366\7N\2\2\u0366\u0392\5\u008eH\b\u0367\u0368\f\6\2")
        buf.write("\2\u0368\u0369\7\6\2\2\u0369\u0392\5\u008eH\7\u036a\u036b")
        buf.write("\f\5\2\2\u036b\u036c\7O\2\2\u036c\u036d\5\u008eH\2\u036d")
        buf.write("\u036e\7H\2\2\u036e\u036f\5\u008eH\6\u036f\u0392\3\2\2")
        buf.write("\2\u0370\u0371\f\4\2\2\u0371\u0372\t\16\2\2\u0372\u0392")
        buf.write("\5\u008eH\5\u0373\u0374\f\35\2\2\u0374\u0392\t\b\2\2\u0375")
        buf.write("\u0376\f\33\2\2\u0376\u0377\7,\2\2\u0377\u0378\5\u008e")
        buf.write("H\2\u0378\u0379\7-\2\2\u0379\u0392\3\2\2\2\u037a\u037b")
        buf.write("\f\32\2\2\u037b\u037d\7,\2\2\u037c\u037e\5\u008eH\2\u037d")
        buf.write("\u037c\3\2\2\2\u037d\u037e\3\2\2\2\u037e\u037f\3\2\2\2")
        buf.write("\u037f\u0381\7H\2\2\u0380\u0382\5\u008eH\2\u0381\u0380")
        buf.write("\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0383\3\2\2\2\u0383")
        buf.write("\u0392\7-\2\2\u0384\u0385\f\31\2\2\u0385\u0386\7/\2\2")
        buf.write("\u0386\u0392\5\u00c4c\2\u0387\u0388\f\30\2\2\u0388\u0389")
        buf.write("\7\21\2\2\u0389\u038a\5\u0094K\2\u038a\u038b\7\23\2\2")
        buf.write("\u038b\u0392\3\2\2\2\u038c\u038d\f\27\2\2\u038d\u038e")
        buf.write("\7\31\2\2\u038e\u038f\5\u0098M\2\u038f\u0390\7\32\2\2")
        buf.write("\u0390\u0392\3\2\2\2\u0391\u0349\3\2\2\2\u0391\u034c\3")
        buf.write("\2\2\2\u0391\u034f\3\2\2\2\u0391\u0352\3\2\2\2\u0391\u0355")
        buf.write("\3\2\2\2\u0391\u0358\3\2\2\2\u0391\u035b\3\2\2\2\u0391")
        buf.write("\u035e\3\2\2\2\u0391\u0361\3\2\2\2\u0391\u0364\3\2\2\2")
        buf.write("\u0391\u0367\3\2\2\2\u0391\u036a\3\2\2\2\u0391\u0370\3")
        buf.write("\2\2\2\u0391\u0373\3\2\2\2\u0391\u0375\3\2\2\2\u0391\u037a")
        buf.write("\3\2\2\2\u0391\u0384\3\2\2\2\u0391\u0387\3\2\2\2\u0391")
        buf.write("\u038c\3\2\2\2\u0392\u0395\3\2\2\2\u0393\u0391\3\2\2\2")
        buf.write("\u0393\u0394\3\2\2\2\u0394\u008f\3\2\2\2\u0395\u0393\3")
        buf.write("\2\2\2\u0396\u03a0\7h\2\2\u0397\u03a0\5\u00c2b\2\u0398")
        buf.write("\u03a0\5\u00c6d\2\u0399\u03a0\5\u00caf\2\u039a\u03a0\5")
        buf.write("\u00c4c\2\u039b\u03a0\7|\2\2\u039c\u03a0\7w\2\2\u039d")
        buf.write("\u03a0\5\u00c0a\2\u039e\u03a0\5N(\2\u039f\u0396\3\2\2")
        buf.write("\2\u039f\u0397\3\2\2\2\u039f\u0398\3\2\2\2\u039f\u0399")
        buf.write("\3\2\2\2\u039f\u039a\3\2\2\2\u039f\u039b\3\2\2\2\u039f")
        buf.write("\u039c\3\2\2\2\u039f\u039d\3\2\2\2\u039f\u039e\3\2\2\2")
        buf.write("\u03a0\u0091\3\2\2\2\u03a1\u03a6\5\u008eH\2\u03a2\u03a3")
        buf.write("\7\22\2\2\u03a3\u03a5\5\u008eH\2\u03a4\u03a2\3\2\2\2\u03a5")
        buf.write("\u03a8\3\2\2\2\u03a6\u03a4\3\2\2\2\u03a6\u03a7\3\2\2\2")
        buf.write("\u03a7\u0093\3\2\2\2\u03a8\u03a6\3\2\2\2\u03a9\u03ae\5")
        buf.write("\u0096L\2\u03aa\u03ab\7\22\2\2\u03ab\u03ad\5\u0096L\2")
        buf.write("\u03ac\u03aa\3\2\2\2\u03ad\u03b0\3\2\2\2\u03ae\u03ac\3")
        buf.write("\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b2\3\2\2\2\u03b0\u03ae")
        buf.write("\3\2\2\2\u03b1\u03b3\7\22\2\2\u03b2\u03b1\3\2\2\2\u03b2")
        buf.write("\u03b3\3\2\2\2\u03b3\u0095\3\2\2\2\u03b4\u03b5\5\u00c4")
        buf.write("c\2\u03b5\u03b6\7H\2\2\u03b6\u03b7\5\u008eH\2\u03b7\u0097")
        buf.write("\3\2\2\2\u03b8\u03ba\7\21\2\2\u03b9\u03bb\5\u0094K\2\u03ba")
        buf.write("\u03b9\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03bc\3\2\2\2")
        buf.write("\u03bc\u03c1\7\23\2\2\u03bd\u03bf\5\u0092J\2\u03be\u03bd")
        buf.write("\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u03c1\3\2\2\2\u03c0")
        buf.write("\u03b8\3\2\2\2\u03c0\u03be\3\2\2\2\u03c1\u0099\3\2\2\2")
        buf.write("\u03c2\u03c3\5\u008eH\2\u03c3\u03c4\7\31\2\2\u03c4\u03c5")
        buf.write("\5\u0098M\2\u03c5\u03c6\7\32\2\2\u03c6\u009b\3\2\2\2\u03c7")
        buf.write("\u03cb\7\21\2\2\u03c8\u03ca\5\u009eP\2\u03c9\u03c8\3\2")
        buf.write("\2\2\u03ca\u03cd\3\2\2\2\u03cb\u03c9\3\2\2\2\u03cb\u03cc")
        buf.write("\3\2\2\2\u03cc\u03ce\3\2\2\2\u03cd\u03cb\3\2\2\2\u03ce")
        buf.write("\u03cf\7\23\2\2\u03cf\u009d\3\2\2\2\u03d0\u03e2\5\u00c4")
        buf.write("c\2\u03d1\u03e2\5\u009cO\2\u03d2\u03e2\5\u00a0Q\2\u03d3")
        buf.write("\u03e2\5\u00a6T\2\u03d4\u03e2\5\u00a8U\2\u03d5\u03e2\5")
        buf.write("\u00aeX\2\u03d6\u03e2\5\u00b0Y\2\u03d7\u03e2\5\u00b2Z")
        buf.write("\2\u03d8\u03e2\5\u00b6\\\2\u03d9\u03e2\5\u00ba^\2\u03da")
        buf.write("\u03e2\5\u00bc_\2\u03db\u03e2\7o\2\2\u03dc\u03e2\7r\2")
        buf.write("\2\u03dd\u03e2\7s\2\2\u03de\u03e2\5\u00c2b\2\u03df\u03e2")
        buf.write("\5\u00caf\2\u03e0\u03e2\5\u00c6d\2\u03e1\u03d0\3\2\2\2")
        buf.write("\u03e1\u03d1\3\2\2\2\u03e1\u03d2\3\2\2\2\u03e1\u03d3\3")
        buf.write("\2\2\2\u03e1\u03d4\3\2\2\2\u03e1\u03d5\3\2\2\2\u03e1\u03d6")
        buf.write("\3\2\2\2\u03e1\u03d7\3\2\2\2\u03e1\u03d8\3\2\2\2\u03e1")
        buf.write("\u03d9\3\2\2\2\u03e1\u03da\3\2\2\2\u03e1\u03db\3\2\2\2")
        buf.write("\u03e1\u03dc\3\2\2\2\u03e1\u03dd\3\2\2\2\u03e1\u03de\3")
        buf.write("\2\2\2\u03e1\u03df\3\2\2\2\u03e1\u03e0\3\2\2\2\u03e2\u009f")
        buf.write("\3\2\2\2\u03e3\u03e7\5\u00a4S\2\u03e4\u03e7\5\u00be`\2")
        buf.write("\u03e5\u03e7\5\u00a2R\2\u03e6\u03e3\3\2\2\2\u03e6\u03e4")
        buf.write("\3\2\2\2\u03e6\u03e5\3\2\2\2\u03e7\u00a1\3\2\2\2\u03e8")
        buf.write("\u03e9\5\u00c4c\2\u03e9\u03ea\7/\2\2\u03ea\u03eb\5\u00c4")
        buf.write("c\2\u03eb\u00a3\3\2\2\2\u03ec\u03f1\7=\2\2\u03ed\u03f1")
        buf.write("\7.\2\2\u03ee\u03f1\7D\2\2\u03ef\u03f1\5\u00c4c\2\u03f0")
        buf.write("\u03ec\3\2\2\2\u03f0\u03ed\3\2\2\2\u03f0\u03ee\3\2\2\2")
        buf.write("\u03f0\u03ef\3\2\2\2\u03f1\u03fe\3\2\2\2\u03f2\u03f4\7")
        buf.write("\31\2\2\u03f3\u03f5\5\u00a0Q\2\u03f4\u03f3\3\2\2\2\u03f4")
        buf.write("\u03f5\3\2\2\2\u03f5\u03fa\3\2\2\2\u03f6\u03f7\7\22\2")
        buf.write("\2\u03f7\u03f9\5\u00a0Q\2\u03f8\u03f6\3\2\2\2\u03f9\u03fc")
        buf.write("\3\2\2\2\u03fa\u03f8\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb")
        buf.write("\u03fd\3\2\2\2\u03fc\u03fa\3\2\2\2\u03fd\u03ff\7\32\2")
        buf.write("\2\u03fe\u03f2\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u00a5")
        buf.write("\3\2\2\2\u0400\u0401\7Z\2\2\u0401\u0404\5\u00aaV\2\u0402")
        buf.write("\u0403\7[\2\2\u0403\u0405\5\u00a0Q\2\u0404\u0402\3\2\2")
        buf.write("\2\u0404\u0405\3\2\2\2\u0405\u00a7\3\2\2\2\u0406\u0407")
        buf.write("\5\u00aaV\2\u0407\u0408\7[\2\2\u0408\u0409\5\u00a0Q\2")
        buf.write("\u0409\u00a9\3\2\2\2\u040a\u0412\5\u00c4c\2\u040b\u0412")
        buf.write("\5\u00a2R\2\u040c\u0412\5\u00acW\2\u040d\u040e\7\31\2")
        buf.write("\2\u040e\u040f\5\u00acW\2\u040f\u0410\7\32\2\2\u0410\u0412")
        buf.write("\3\2\2\2\u0411\u040a\3\2\2\2\u0411\u040b\3\2\2\2\u0411")
        buf.write("\u040c\3\2\2\2\u0411\u040d\3\2\2\2\u0412\u00ab\3\2\2\2")
        buf.write("\u0413\u0418\5\u00c4c\2\u0414\u0415\7\22\2\2\u0415\u0417")
        buf.write("\5\u00c4c\2\u0416\u0414\3\2\2\2\u0417\u041a\3\2\2\2\u0418")
        buf.write("\u0416\3\2\2\2\u0418\u0419\3\2\2\2\u0419\u00ad\3\2\2\2")
        buf.write("\u041a\u0418\3\2\2\2\u041b\u041c\5\u00a0Q\2\u041c\u041d")
        buf.write("\7\\\2\2\u041d\u041e\5\u00c4c\2\u041e\u00af\3\2\2\2\u041f")
        buf.write("\u0420\5\u00c4c\2\u0420\u0421\7H\2\2\u0421\u00b1\3\2\2")
        buf.write("\2\u0422\u0423\7]\2\2\u0423\u0427\5\u00a0Q\2\u0424\u0426")
        buf.write("\5\u00b4[\2\u0425\u0424\3\2\2\2\u0426\u0429\3\2\2\2\u0427")
        buf.write("\u0425\3\2\2\2\u0427\u0428\3\2\2\2\u0428\u00b3\3\2\2\2")
        buf.write("\u0429\u0427\3\2\2\2\u042a\u042b\7^\2\2\u042b\u042c\5")
        buf.write("\u00be`\2\u042c\u042d\5\u009cO\2\u042d\u0431\3\2\2\2\u042e")
        buf.write("\u042f\7_\2\2\u042f\u0431\5\u009cO\2\u0430\u042a\3\2\2")
        buf.write("\2\u0430\u042e\3\2\2\2\u0431\u00b5\3\2\2\2\u0432\u0433")
        buf.write("\7(\2\2\u0433\u0434\5\u00c4c\2\u0434\u0436\7\31\2\2\u0435")
        buf.write("\u0437\5\u00acW\2\u0436\u0435\3\2\2\2\u0436\u0437\3\2")
        buf.write("\2\2\u0437\u0438\3\2\2\2\u0438\u043a\7\32\2\2\u0439\u043b")
        buf.write("\5\u00b8]\2\u043a\u0439\3\2\2\2\u043a\u043b\3\2\2\2\u043b")
        buf.write("\u043c\3\2\2\2\u043c\u043d\5\u009cO\2\u043d\u00b7\3\2")
        buf.write("\2\2\u043e\u043f\7`\2\2\u043f\u0440\5\u00acW\2\u0440\u00b9")
        buf.write("\3\2\2\2\u0441\u0444\7\35\2\2\u0442\u0445\5\u009cO\2\u0443")
        buf.write("\u0445\5\u00a0Q\2\u0444\u0442\3\2\2\2\u0444\u0443\3\2")
        buf.write("\2\2\u0445\u0446\3\2\2\2\u0446\u0449\5\u00a0Q\2\u0447")
        buf.write("\u044a\5\u009cO\2\u0448\u044a\5\u00a0Q\2\u0449\u0447\3")
        buf.write("\2\2\2\u0449\u0448\3\2\2\2\u044a\u044b\3\2\2\2\u044b\u044c")
        buf.write("\5\u009cO\2\u044c\u00bb\3\2\2\2\u044d\u044e\7\65\2\2\u044e")
        buf.write("\u044f\5\u00a0Q\2\u044f\u0450\5\u009cO\2\u0450\u00bd\3")
        buf.write("\2\2\2\u0451\u0457\5\u00caf\2\u0452\u0457\7i\2\2\u0453")
        buf.write("\u0457\7j\2\2\u0454\u0457\5\u00c6d\2\u0455\u0457\7h\2")
        buf.write("\2\u0456\u0451\3\2\2\2\u0456\u0452\3\2\2\2\u0456\u0453")
        buf.write("\3\2\2\2\u0456\u0454\3\2\2\2\u0456\u0455\3\2\2\2\u0457")
        buf.write("\u00bf\3\2\2\2\u0458\u045a\7\31\2\2\u0459\u045b\5\u008e")
        buf.write("H\2\u045a\u0459\3\2\2\2\u045a\u045b\3\2\2\2\u045b\u0462")
        buf.write("\3\2\2\2\u045c\u045e\7\22\2\2\u045d\u045f\5\u008eH\2\u045e")
        buf.write("\u045d\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u0461\3\2\2\2")
        buf.write("\u0460\u045c\3\2\2\2\u0461\u0464\3\2\2\2\u0462\u0460\3")
        buf.write("\2\2\2\u0462\u0463\3\2\2\2\u0463\u0465\3\2\2\2\u0464\u0462")
        buf.write("\3\2\2\2\u0465\u0473\7\32\2\2\u0466\u046f\7,\2\2\u0467")
        buf.write("\u046c\5\u008eH\2\u0468\u0469\7\22\2\2\u0469\u046b\5\u008e")
        buf.write("H\2\u046a\u0468\3\2\2\2\u046b\u046e\3\2\2\2\u046c\u046a")
        buf.write("\3\2\2\2\u046c\u046d\3\2\2\2\u046d\u0470\3\2\2\2\u046e")
        buf.write("\u046c\3\2\2\2\u046f\u0467\3\2\2\2\u046f\u0470\3\2\2\2")
        buf.write("\u0470\u0471\3\2\2\2\u0471\u0473\7-\2\2\u0472\u0458\3")
        buf.write("\2\2\2\u0472\u0466\3\2\2\2\u0473\u00c1\3\2\2\2\u0474\u0476")
        buf.write("\t\17\2\2\u0475\u0477\7k\2\2\u0476\u0475\3\2\2\2\u0476")
        buf.write("\u0477\3\2\2\2\u0477\u00c3\3\2\2\2\u0478\u0479\t\20\2")
        buf.write("\2\u0479\u00c5\3\2\2\2\u047a\u047c\7l\2\2\u047b\u047a")
        buf.write("\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u047b\3\2\2\2\u047d")
        buf.write("\u047e\3\2\2\2\u047e\u00c7\3\2\2\2\u047f\u048b\7b\2\2")
        buf.write("\u0480\u0481\7\31\2\2\u0481\u0486\5P)\2\u0482\u0483\7")
        buf.write("\22\2\2\u0483\u0485\5P)\2\u0484\u0482\3\2\2\2\u0485\u0488")
        buf.write("\3\2\2\2\u0486\u0484\3\2\2\2\u0486\u0487\3\2\2\2\u0487")
        buf.write("\u0489\3\2\2\2\u0488\u0486\3\2\2\2\u0489\u048a\7\32\2")
        buf.write("\2\u048a\u048c\3\2\2\2\u048b\u0480\3\2\2\2\u048b\u048c")
        buf.write("\3\2\2\2\u048c\u00c9\3\2\2\2\u048d\u048f\7\u0083\2\2\u048e")
        buf.write("\u048d\3\2\2\2\u048f\u0490\3\2\2\2\u0490\u048e\3\2\2\2")
        buf.write("\u0490\u0491\3\2\2\2\u0491\u00cb\3\2\2\2\u0084\u00d6\u00d8")
        buf.write("\u00e7\u00eb\u00f0\u00f6\u00fa\u00fd\u0102\u0108\u010f")
        buf.write("\u0113\u0120\u0128\u012d\u0137\u013a\u0140\u0148\u014b")
        buf.write("\u0156\u015f\u0161\u0167\u0182\u0185\u0190\u0195\u019a")
        buf.write("\u01a8\u01ab\u01b2\u01b6\u01b8\u01bd\u01c2\u01c5\u01cb")
        buf.write("\u01cf\u01d3\u01d8\u01e5\u01e7\u01ee\u01f8\u01fe\u0209")
        buf.write("\u020c\u0212\u0215\u021d\u0220\u0226\u0229\u0231\u0234")
        buf.write("\u023a\u023e\u0249\u024e\u0253\u025b\u0260\u0266\u026b")
        buf.write("\u0278\u027a\u027f\u0289\u029d\u02a9\u02ae\u02b4\u02b8")
        buf.write("\u02bb\u02c7\u02d0\u02d4\u02d7\u02de\u02e4\u02fa\u0310")
        buf.write("\u0314\u0319\u031d\u0321\u0326\u032b\u032f\u0347\u037d")
        buf.write("\u0381\u0391\u0393\u039f\u03a6\u03ae\u03b2\u03ba\u03be")
        buf.write("\u03c0\u03cb\u03e1\u03e6\u03f0\u03f4\u03fa\u03fe\u0404")
        buf.write("\u0411\u0418\u0427\u0430\u0436\u043a\u0444\u0449\u0456")
        buf.write("\u045a\u045e\u0462\u046c\u046f\u0472\u0476\u047d\u0486")
        buf.write("\u048b\u0490")
        return buf.getvalue()


class SolidityParser(Parser):
    grammarFileName = "Solidity.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "'pragma'",
        "';'",
        "'*'",
        "'||'",
        "'^'",
        "'~'",
        "'>='",
        "'>'",
        "'<'",
        "'<='",
        "'='",
        "'as'",
        "'import'",
        "'from'",
        "'{'",
        "','",
        "'}'",
        "'abstract'",
        "'contract'",
        "'interface'",
        "'library'",
        "'is'",
        "'('",
        "')'",
        "'error'",
        "'using'",
        "'for'",
        "'|'",
        "'&'",
        "'+'",
        "'-'",
        "'/'",
        "'%'",
        "'=='",
        "'!='",
        "'struct'",
        "'modifier'",
        "'function'",
        "'returns'",
        "'event'",
        "'enum'",
        "'['",
        "']'",
        "'address'",
        "'.'",
        "'mapping'",
        "'=>'",
        "'memory'",
        "'storage'",
        "'calldata'",
        "'if'",
        "'else'",
        "'try'",
        "'catch'",
        "'while'",
        "'unchecked'",
        "'assembly'",
        "'do'",
        "'return'",
        "'throw'",
        "'emit'",
        "'revert'",
        "'var'",
        "'bool'",
        "'string'",
        "'byte'",
        "'++'",
        "'--'",
        "'new'",
        "':'",
        "'delete'",
        "'!'",
        "'**'",
        "'<<'",
        "'>>'",
        "'&&'",
        "'?'",
        "'|='",
        "'^='",
        "'&='",
        "'<<='",
        "'>>='",
        "'+='",
        "'-='",
        "'*='",
        "'/='",
        "'%='",
        "'let'",
        "':='",
        "'=:'",
        "'switch'",
        "'case'",
        "'default'",
        "'->'",
        "'callback'",
        "'override'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'anonymous'",
        "'break'",
        "'constant'",
        "'immutable'",
        "'continue'",
        "'leave'",
        "'external'",
        "'indexed'",
        "'internal'",
        "'payable'",
        "'private'",
        "'public'",
        "'virtual'",
        "'pure'",
        "'type'",
        "'view'",
        "'global'",
        "'constructor'",
        "'fallback'",
        "'receive'",
    ]

    symbolicNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "Int",
        "Uint",
        "Byte",
        "Fixed",
        "Ufixed",
        "BooleanLiteral",
        "DecimalNumber",
        "HexNumber",
        "NumberUnit",
        "HexLiteralFragment",
        "ReservedKeyword",
        "AnonymousKeyword",
        "BreakKeyword",
        "ConstantKeyword",
        "ImmutableKeyword",
        "ContinueKeyword",
        "LeaveKeyword",
        "ExternalKeyword",
        "IndexedKeyword",
        "InternalKeyword",
        "PayableKeyword",
        "PrivateKeyword",
        "PublicKeyword",
        "VirtualKeyword",
        "PureKeyword",
        "TypeKeyword",
        "ViewKeyword",
        "GlobalKeyword",
        "ConstructorKeyword",
        "FallbackKeyword",
        "ReceiveKeyword",
        "Identifier",
        "StringLiteralFragment",
        "VersionLiteral",
        "WS",
        "COMMENT",
        "LINE_COMMENT",
    ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_pragmaName = 2
    RULE_pragmaValue = 3
    RULE_version = 4
    RULE_versionOperator = 5
    RULE_versionConstraint = 6
    RULE_importDeclaration = 7
    RULE_importDirective = 8
    RULE_importPath = 9
    RULE_contractDefinition = 10
    RULE_inheritanceSpecifier = 11
    RULE_contractPart = 12
    RULE_stateVariableDeclaration = 13
    RULE_fileLevelConstant = 14
    RULE_customErrorDefinition = 15
    RULE_typeDefinition = 16
    RULE_usingForDeclaration = 17
    RULE_usingForObject = 18
    RULE_usingForObjectDirective = 19
    RULE_userDefinableOperators = 20
    RULE_structDefinition = 21
    RULE_modifierDefinition = 22
    RULE_modifierInvocation = 23
    RULE_functionDefinition = 24
    RULE_functionDescriptor = 25
    RULE_returnParameters = 26
    RULE_modifierList = 27
    RULE_eventDefinition = 28
    RULE_enumValue = 29
    RULE_enumDefinition = 30
    RULE_parameterList = 31
    RULE_parameter = 32
    RULE_eventParameterList = 33
    RULE_eventParameter = 34
    RULE_functionTypeParameterList = 35
    RULE_functionTypeParameter = 36
    RULE_variableDeclaration = 37
    RULE_typeName = 38
    RULE_userDefinedTypeName = 39
    RULE_mappingKey = 40
    RULE_mapping = 41
    RULE_mappingKeyName = 42
    RULE_mappingValueName = 43
    RULE_functionTypeName = 44
    RULE_storageLocation = 45
    RULE_stateMutability = 46
    RULE_block = 47
    RULE_statement = 48
    RULE_expressionStatement = 49
    RULE_ifStatement = 50
    RULE_tryStatement = 51
    RULE_catchClause = 52
    RULE_whileStatement = 53
    RULE_simpleStatement = 54
    RULE_uncheckedStatement = 55
    RULE_forStatement = 56
    RULE_inlineAssemblyStatement = 57
    RULE_inlineAssemblyStatementFlag = 58
    RULE_doWhileStatement = 59
    RULE_continueStatement = 60
    RULE_breakStatement = 61
    RULE_returnStatement = 62
    RULE_throwStatement = 63
    RULE_emitStatement = 64
    RULE_revertStatement = 65
    RULE_variableDeclarationStatement = 66
    RULE_variableDeclarationList = 67
    RULE_identifierList = 68
    RULE_elementaryTypeName = 69
    RULE_expression = 70
    RULE_primaryExpression = 71
    RULE_expressionList = 72
    RULE_nameValueList = 73
    RULE_nameValue = 74
    RULE_functionCallArguments = 75
    RULE_functionCall = 76
    RULE_assemblyBlock = 77
    RULE_assemblyItem = 78
    RULE_assemblyExpression = 79
    RULE_assemblyMember = 80
    RULE_assemblyCall = 81
    RULE_assemblyLocalDefinition = 82
    RULE_assemblyAssignment = 83
    RULE_assemblyIdentifierOrList = 84
    RULE_assemblyIdentifierList = 85
    RULE_assemblyStackAssignment = 86
    RULE_labelDefinition = 87
    RULE_assemblySwitch = 88
    RULE_assemblyCase = 89
    RULE_assemblyFunctionDefinition = 90
    RULE_assemblyFunctionReturns = 91
    RULE_assemblyFor = 92
    RULE_assemblyIf = 93
    RULE_assemblyLiteral = 94
    RULE_tupleExpression = 95
    RULE_numberLiteral = 96
    RULE_identifier = 97
    RULE_hexLiteral = 98
    RULE_overrideSpecifier = 99
    RULE_stringLiteral = 100

    ruleNames = [
        "sourceUnit",
        "pragmaDirective",
        "pragmaName",
        "pragmaValue",
        "version",
        "versionOperator",
        "versionConstraint",
        "importDeclaration",
        "importDirective",
        "importPath",
        "contractDefinition",
        "inheritanceSpecifier",
        "contractPart",
        "stateVariableDeclaration",
        "fileLevelConstant",
        "customErrorDefinition",
        "typeDefinition",
        "usingForDeclaration",
        "usingForObject",
        "usingForObjectDirective",
        "userDefinableOperators",
        "structDefinition",
        "modifierDefinition",
        "modifierInvocation",
        "functionDefinition",
        "functionDescriptor",
        "returnParameters",
        "modifierList",
        "eventDefinition",
        "enumValue",
        "enumDefinition",
        "parameterList",
        "parameter",
        "eventParameterList",
        "eventParameter",
        "functionTypeParameterList",
        "functionTypeParameter",
        "variableDeclaration",
        "typeName",
        "userDefinedTypeName",
        "mappingKey",
        "mapping",
        "mappingKeyName",
        "mappingValueName",
        "functionTypeName",
        "storageLocation",
        "stateMutability",
        "block",
        "statement",
        "expressionStatement",
        "ifStatement",
        "tryStatement",
        "catchClause",
        "whileStatement",
        "simpleStatement",
        "uncheckedStatement",
        "forStatement",
        "inlineAssemblyStatement",
        "inlineAssemblyStatementFlag",
        "doWhileStatement",
        "continueStatement",
        "breakStatement",
        "returnStatement",
        "throwStatement",
        "emitStatement",
        "revertStatement",
        "variableDeclarationStatement",
        "variableDeclarationList",
        "identifierList",
        "elementaryTypeName",
        "expression",
        "primaryExpression",
        "expressionList",
        "nameValueList",
        "nameValue",
        "functionCallArguments",
        "functionCall",
        "assemblyBlock",
        "assemblyItem",
        "assemblyExpression",
        "assemblyMember",
        "assemblyCall",
        "assemblyLocalDefinition",
        "assemblyAssignment",
        "assemblyIdentifierOrList",
        "assemblyIdentifierList",
        "assemblyStackAssignment",
        "labelDefinition",
        "assemblySwitch",
        "assemblyCase",
        "assemblyFunctionDefinition",
        "assemblyFunctionReturns",
        "assemblyFor",
        "assemblyIf",
        "assemblyLiteral",
        "tupleExpression",
        "numberLiteral",
        "identifier",
        "hexLiteral",
        "overrideSpecifier",
        "stringLiteral",
    ]

    EOF = Token.EOF
    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    T__47 = 48
    T__48 = 49
    T__49 = 50
    T__50 = 51
    T__51 = 52
    T__52 = 53
    T__53 = 54
    T__54 = 55
    T__55 = 56
    T__56 = 57
    T__57 = 58
    T__58 = 59
    T__59 = 60
    T__60 = 61
    T__61 = 62
    T__62 = 63
    T__63 = 64
    T__64 = 65
    T__65 = 66
    T__66 = 67
    T__67 = 68
    T__68 = 69
    T__69 = 70
    T__70 = 71
    T__71 = 72
    T__72 = 73
    T__73 = 74
    T__74 = 75
    T__75 = 76
    T__76 = 77
    T__77 = 78
    T__78 = 79
    T__79 = 80
    T__80 = 81
    T__81 = 82
    T__82 = 83
    T__83 = 84
    T__84 = 85
    T__85 = 86
    T__86 = 87
    T__87 = 88
    T__88 = 89
    T__89 = 90
    T__90 = 91
    T__91 = 92
    T__92 = 93
    T__93 = 94
    T__94 = 95
    T__95 = 96
    Int = 97
    Uint = 98
    Byte = 99
    Fixed = 100
    Ufixed = 101
    BooleanLiteral = 102
    DecimalNumber = 103
    HexNumber = 104
    NumberUnit = 105
    HexLiteralFragment = 106
    ReservedKeyword = 107
    AnonymousKeyword = 108
    BreakKeyword = 109
    ConstantKeyword = 110
    ImmutableKeyword = 111
    ContinueKeyword = 112
    LeaveKeyword = 113
    ExternalKeyword = 114
    IndexedKeyword = 115
    InternalKeyword = 116
    PayableKeyword = 117
    PrivateKeyword = 118
    PublicKeyword = 119
    VirtualKeyword = 120
    PureKeyword = 121
    TypeKeyword = 122
    ViewKeyword = 123
    GlobalKeyword = 124
    ConstructorKeyword = 125
    FallbackKeyword = 126
    ReceiveKeyword = 127
    Identifier = 128
    StringLiteralFragment = 129
    VersionLiteral = 130
    WS = 131
    COMMENT = 132
    LINE_COMMENT = 133

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class SourceUnitContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def pragmaDirective(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(
                    SolidityParser.PragmaDirectiveContext, i
                )

        def importDirective(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(
                    SolidityParser.ImportDirectiveContext, i
                )

        def contractDefinition(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.ContractDefinitionContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.ContractDefinitionContext, i
                )

        def enumDefinition(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext, i)

        def structDefinition(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructDefinitionContext)
            else:
                return self.getTypedRuleContext(
                    SolidityParser.StructDefinitionContext, i
                )

        def functionDefinition(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.FunctionDefinitionContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.FunctionDefinitionContext, i
                )

        def fileLevelConstant(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.FileLevelConstantContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.FileLevelConstantContext, i
                )

        def customErrorDefinition(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.CustomErrorDefinitionContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.CustomErrorDefinitionContext, i
                )

        def typeDefinition(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.TypeDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.TypeDefinitionContext, i)

        def usingForDeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.UsingForDeclarationContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.UsingForDeclarationContext, i
                )

        def getRuleIndex(self):
            return SolidityParser.RULE_sourceUnit

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSourceUnit"):
                listener.enterSourceUnit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSourceUnit"):
                listener.exitSourceUnit(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSourceUnit"):
                return visitor.visitSourceUnit(self)
            else:
                return visitor.visitChildren(self)

    def sourceUnit(self):
        localctx = SolidityParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (((_la - 1)) & ~0x3F) == 0
                and (
                    (1 << (_la - 1))
                    & (
                        (1 << (SolidityParser.T__0 - 1))
                        | (1 << (SolidityParser.T__12 - 1))
                        | (1 << (SolidityParser.T__13 - 1))
                        | (1 << (SolidityParser.T__17 - 1))
                        | (1 << (SolidityParser.T__18 - 1))
                        | (1 << (SolidityParser.T__19 - 1))
                        | (1 << (SolidityParser.T__20 - 1))
                        | (1 << (SolidityParser.T__24 - 1))
                        | (1 << (SolidityParser.T__25 - 1))
                        | (1 << (SolidityParser.T__35 - 1))
                        | (1 << (SolidityParser.T__37 - 1))
                        | (1 << (SolidityParser.T__40 - 1))
                        | (1 << (SolidityParser.T__43 - 1))
                        | (1 << (SolidityParser.T__45 - 1))
                        | (1 << (SolidityParser.T__49 - 1))
                        | (1 << (SolidityParser.T__61 - 1))
                        | (1 << (SolidityParser.T__62 - 1))
                        | (1 << (SolidityParser.T__63 - 1))
                    )
                )
                != 0
            ) or (
                (((_la - 65)) & ~0x3F) == 0
                and (
                    (1 << (_la - 65))
                    & (
                        (1 << (SolidityParser.T__64 - 65))
                        | (1 << (SolidityParser.T__65 - 65))
                        | (1 << (SolidityParser.T__94 - 65))
                        | (1 << (SolidityParser.Int - 65))
                        | (1 << (SolidityParser.Uint - 65))
                        | (1 << (SolidityParser.Byte - 65))
                        | (1 << (SolidityParser.Fixed - 65))
                        | (1 << (SolidityParser.Ufixed - 65))
                        | (1 << (SolidityParser.LeaveKeyword - 65))
                        | (1 << (SolidityParser.PayableKeyword - 65))
                        | (1 << (SolidityParser.TypeKeyword - 65))
                        | (1 << (SolidityParser.GlobalKeyword - 65))
                        | (1 << (SolidityParser.ConstructorKeyword - 65))
                        | (1 << (SolidityParser.FallbackKeyword - 65))
                        | (1 << (SolidityParser.ReceiveKeyword - 65))
                        | (1 << (SolidityParser.Identifier - 65))
                    )
                )
                != 0
            ):
                self.state = 212
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 0, self._ctx)
                if la_ == 1:
                    self.state = 202
                    self.pragmaDirective()
                    pass

                elif la_ == 2:
                    self.state = 203
                    self.importDirective()
                    pass

                elif la_ == 3:
                    self.state = 204
                    self.contractDefinition()
                    pass

                elif la_ == 4:
                    self.state = 205
                    self.enumDefinition()
                    pass

                elif la_ == 5:
                    self.state = 206
                    self.structDefinition()
                    pass

                elif la_ == 6:
                    self.state = 207
                    self.functionDefinition()
                    pass

                elif la_ == 7:
                    self.state = 208
                    self.fileLevelConstant()
                    pass

                elif la_ == 8:
                    self.state = 209
                    self.customErrorDefinition()
                    pass

                elif la_ == 9:
                    self.state = 210
                    self.typeDefinition()
                    pass

                elif la_ == 10:
                    self.state = 211
                    self.usingForDeclaration()
                    pass

                self.state = 216
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 217
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaDirectiveContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(SolidityParser.PragmaNameContext, 0)

        def pragmaValue(self):
            return self.getTypedRuleContext(SolidityParser.PragmaValueContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaDirective

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPragmaDirective"):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPragmaDirective"):
                listener.exitPragmaDirective(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPragmaDirective"):
                return visitor.visitPragmaDirective(self)
            else:
                return visitor.visitChildren(self)

    def pragmaDirective(self):
        localctx = SolidityParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self.match(SolidityParser.T__0)
            self.state = 220
            self.pragmaName()
            self.state = 221
            self.pragmaValue()
            self.state = 222
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaNameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPragmaName"):
                listener.enterPragmaName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPragmaName"):
                listener.exitPragmaName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPragmaName"):
                return visitor.visitPragmaName(self)
            else:
                return visitor.visitChildren(self)

    def pragmaName(self):
        localctx = SolidityParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaValueContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(SolidityParser.VersionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaValue

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPragmaValue"):
                listener.enterPragmaValue(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPragmaValue"):
                listener.exitPragmaValue(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPragmaValue"):
                return visitor.visitPragmaValue(self)
            else:
                return visitor.visitChildren(self)

    def pragmaValue(self):
        localctx = SolidityParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaValue)
        try:
            self.state = 229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 2, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 226
                self.match(SolidityParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 227
                self.version()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 228
                self.expression(0)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.VersionConstraintContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.VersionConstraintContext, i
                )

        def getRuleIndex(self):
            return SolidityParser.RULE_version

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVersion"):
                listener.enterVersion(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVersion"):
                listener.exitVersion(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVersion"):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)

    def version(self):
        localctx = SolidityParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self.versionConstraint()
            self.state = 238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SolidityParser.T__3)
                            | (1 << SolidityParser.T__4)
                            | (1 << SolidityParser.T__5)
                            | (1 << SolidityParser.T__6)
                            | (1 << SolidityParser.T__7)
                            | (1 << SolidityParser.T__8)
                            | (1 << SolidityParser.T__9)
                            | (1 << SolidityParser.T__10)
                        )
                    )
                    != 0
                )
                or _la == SolidityParser.DecimalNumber
                or _la == SolidityParser.VersionLiteral
            ):
                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SolidityParser.T__3:
                    self.state = 232
                    self.match(SolidityParser.T__3)

                self.state = 235
                self.versionConstraint()
                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionOperatorContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SolidityParser.RULE_versionOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVersionOperator"):
                listener.enterVersionOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVersionOperator"):
                listener.exitVersionOperator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVersionOperator"):
                return visitor.visitVersionOperator(self)
            else:
                return visitor.visitChildren(self)

    def versionOperator(self):
        localctx = SolidityParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_versionOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SolidityParser.T__4)
                            | (1 << SolidityParser.T__5)
                            | (1 << SolidityParser.T__6)
                            | (1 << SolidityParser.T__7)
                            | (1 << SolidityParser.T__8)
                            | (1 << SolidityParser.T__9)
                            | (1 << SolidityParser.T__10)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionConstraintContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(SolidityParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(SolidityParser.VersionOperatorContext, 0)

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_versionConstraint

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVersionConstraint"):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVersionConstraint"):
                listener.exitVersionConstraint(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVersionConstraint"):
                return visitor.visitVersionConstraint(self)
            else:
                return visitor.visitChildren(self)

    def versionConstraint(self):
        localctx = SolidityParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_versionConstraint)
        self._la = 0  # Token type
        try:
            self.state = 251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 7, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3F) == 0 and (
                    (1 << _la)
                    & (
                        (1 << SolidityParser.T__4)
                        | (1 << SolidityParser.T__5)
                        | (1 << SolidityParser.T__6)
                        | (1 << SolidityParser.T__7)
                        | (1 << SolidityParser.T__8)
                        | (1 << SolidityParser.T__9)
                        | (1 << SolidityParser.T__10)
                    )
                ) != 0:
                    self.state = 243
                    self.versionOperator()

                self.state = 246
                self.match(SolidityParser.VersionLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3F) == 0 and (
                    (1 << _la)
                    & (
                        (1 << SolidityParser.T__4)
                        | (1 << SolidityParser.T__5)
                        | (1 << SolidityParser.T__6)
                        | (1 << SolidityParser.T__7)
                        | (1 << SolidityParser.T__8)
                        | (1 << SolidityParser.T__9)
                        | (1 << SolidityParser.T__10)
                    )
                ) != 0:
                    self.state = 247
                    self.versionOperator()

                self.state = 250
                self.match(SolidityParser.DecimalNumber)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDeclarationContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_importDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImportDeclaration"):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImportDeclaration"):
                listener.exitImportDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImportDeclaration"):
                return visitor.visitImportDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def importDeclaration(self):
        localctx = SolidityParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self.identifier()
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.T__11:
                self.state = 254
                self.match(SolidityParser.T__11)
                self.state = 255
                self.identifier()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportDirectiveContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importPath(self):
            return self.getTypedRuleContext(SolidityParser.ImportPathContext, 0)

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext, i)

        def importDeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.ImportDeclarationContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.ImportDeclarationContext, i
                )

        def getRuleIndex(self):
            return SolidityParser.RULE_importDirective

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImportDirective"):
                listener.enterImportDirective(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImportDirective"):
                listener.exitImportDirective(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImportDirective"):
                return visitor.visitImportDirective(self)
            else:
                return visitor.visitChildren(self)

    def importDirective(self):
        localctx = SolidityParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDirective)
        self._la = 0  # Token type
        try:
            self.state = 294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 258
                self.match(SolidityParser.T__12)
                self.state = 259
                self.importPath()
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SolidityParser.T__11:
                    self.state = 260
                    self.match(SolidityParser.T__11)
                    self.state = 261
                    self.identifier()

                self.state = 264
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 266
                self.match(SolidityParser.T__12)
                self.state = 269
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.T__2]:
                    self.state = 267
                    self.match(SolidityParser.T__2)
                    pass
                elif token in [
                    SolidityParser.T__13,
                    SolidityParser.T__24,
                    SolidityParser.T__43,
                    SolidityParser.T__49,
                    SolidityParser.T__61,
                    SolidityParser.T__94,
                    SolidityParser.LeaveKeyword,
                    SolidityParser.PayableKeyword,
                    SolidityParser.GlobalKeyword,
                    SolidityParser.ConstructorKeyword,
                    SolidityParser.ReceiveKeyword,
                    SolidityParser.Identifier,
                ]:
                    self.state = 268
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == SolidityParser.T__11:
                    self.state = 271
                    self.match(SolidityParser.T__11)
                    self.state = 272
                    self.identifier()

                self.state = 275
                self.match(SolidityParser.T__13)
                self.state = 276
                self.importPath()
                self.state = 277
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 279
                self.match(SolidityParser.T__12)
                self.state = 280
                self.match(SolidityParser.T__14)
                self.state = 281
                self.importDeclaration()
                self.state = 286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SolidityParser.T__15:
                    self.state = 282
                    self.match(SolidityParser.T__15)
                    self.state = 283
                    self.importDeclaration()
                    self.state = 288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 289
                self.match(SolidityParser.T__16)
                self.state = 290
                self.match(SolidityParser.T__13)
                self.state = 291
                self.importPath()
                self.state = 292
                self.match(SolidityParser.T__1)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportPathContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self):
            return self.getToken(SolidityParser.StringLiteralFragment, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_importPath

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImportPath"):
                listener.enterImportPath(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImportPath"):
                listener.exitImportPath(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImportPath"):
                return visitor.visitImportPath(self)
            else:
                return visitor.visitChildren(self)

    def importPath(self):
        localctx = SolidityParser.ImportPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_importPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(SolidityParser.StringLiteralFragment)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContractDefinitionContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def inheritanceSpecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.InheritanceSpecifierContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.InheritanceSpecifierContext, i
                )

        def contractPart(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractPartContext, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_contractDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterContractDefinition"):
                listener.enterContractDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitContractDefinition"):
                listener.exitContractDefinition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitContractDefinition"):
                return visitor.visitContractDefinition(self)
            else:
                return visitor.visitChildren(self)

    def contractDefinition(self):
        localctx = SolidityParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_contractDefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.T__17:
                self.state = 298
                self.match(SolidityParser.T__17)

            self.state = 301
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SolidityParser.T__18)
                            | (1 << SolidityParser.T__19)
                            | (1 << SolidityParser.T__20)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 302
            self.identifier()
            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.T__21:
                self.state = 303
                self.match(SolidityParser.T__21)
                self.state = 304
                self.inheritanceSpecifier()
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SolidityParser.T__15:
                    self.state = 305
                    self.match(SolidityParser.T__15)
                    self.state = 306
                    self.inheritanceSpecifier()
                    self.state = 311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 314
            self.match(SolidityParser.T__14)
            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (((_la - 14)) & ~0x3F) == 0
                and (
                    (1 << (_la - 14))
                    & (
                        (1 << (SolidityParser.T__13 - 14))
                        | (1 << (SolidityParser.T__24 - 14))
                        | (1 << (SolidityParser.T__25 - 14))
                        | (1 << (SolidityParser.T__35 - 14))
                        | (1 << (SolidityParser.T__36 - 14))
                        | (1 << (SolidityParser.T__37 - 14))
                        | (1 << (SolidityParser.T__39 - 14))
                        | (1 << (SolidityParser.T__40 - 14))
                        | (1 << (SolidityParser.T__43 - 14))
                        | (1 << (SolidityParser.T__45 - 14))
                        | (1 << (SolidityParser.T__49 - 14))
                        | (1 << (SolidityParser.T__61 - 14))
                        | (1 << (SolidityParser.T__62 - 14))
                        | (1 << (SolidityParser.T__63 - 14))
                        | (1 << (SolidityParser.T__64 - 14))
                        | (1 << (SolidityParser.T__65 - 14))
                    )
                )
                != 0
            ) or (
                (((_la - 95)) & ~0x3F) == 0
                and (
                    (1 << (_la - 95))
                    & (
                        (1 << (SolidityParser.T__94 - 95))
                        | (1 << (SolidityParser.Int - 95))
                        | (1 << (SolidityParser.Uint - 95))
                        | (1 << (SolidityParser.Byte - 95))
                        | (1 << (SolidityParser.Fixed - 95))
                        | (1 << (SolidityParser.Ufixed - 95))
                        | (1 << (SolidityParser.LeaveKeyword - 95))
                        | (1 << (SolidityParser.PayableKeyword - 95))
                        | (1 << (SolidityParser.TypeKeyword - 95))
                        | (1 << (SolidityParser.GlobalKeyword - 95))
                        | (1 << (SolidityParser.ConstructorKeyword - 95))
                        | (1 << (SolidityParser.FallbackKeyword - 95))
                        | (1 << (SolidityParser.ReceiveKeyword - 95))
                        | (1 << (SolidityParser.Identifier - 95))
                    )
                )
                != 0
            ):
                self.state = 315
                self.contractPart()
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 321
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InheritanceSpecifierContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(
                SolidityParser.UserDefinedTypeNameContext, 0
            )

        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_inheritanceSpecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInheritanceSpecifier"):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInheritanceSpecifier"):
                listener.exitInheritanceSpecifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInheritanceSpecifier"):
                return visitor.visitInheritanceSpecifier(self)
            else:
                return visitor.visitChildren(self)

    def inheritanceSpecifier(self):
        localctx = SolidityParser.InheritanceSpecifierContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 22, self.RULE_inheritanceSpecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.userDefinedTypeName()
            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.T__22:
                self.state = 324
                self.match(SolidityParser.T__22)
                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (((_la - 6)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 6))
                        & (
                            (1 << (SolidityParser.T__5 - 6))
                            | (1 << (SolidityParser.T__13 - 6))
                            | (1 << (SolidityParser.T__22 - 6))
                            | (1 << (SolidityParser.T__24 - 6))
                            | (1 << (SolidityParser.T__29 - 6))
                            | (1 << (SolidityParser.T__30 - 6))
                            | (1 << (SolidityParser.T__37 - 6))
                            | (1 << (SolidityParser.T__41 - 6))
                            | (1 << (SolidityParser.T__43 - 6))
                            | (1 << (SolidityParser.T__45 - 6))
                            | (1 << (SolidityParser.T__49 - 6))
                            | (1 << (SolidityParser.T__61 - 6))
                            | (1 << (SolidityParser.T__62 - 6))
                            | (1 << (SolidityParser.T__63 - 6))
                            | (1 << (SolidityParser.T__64 - 6))
                            | (1 << (SolidityParser.T__65 - 6))
                            | (1 << (SolidityParser.T__66 - 6))
                            | (1 << (SolidityParser.T__67 - 6))
                            | (1 << (SolidityParser.T__68 - 6))
                        )
                    )
                    != 0
                ) or (
                    (((_la - 71)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 71))
                        & (
                            (1 << (SolidityParser.T__70 - 71))
                            | (1 << (SolidityParser.T__71 - 71))
                            | (1 << (SolidityParser.T__94 - 71))
                            | (1 << (SolidityParser.Int - 71))
                            | (1 << (SolidityParser.Uint - 71))
                            | (1 << (SolidityParser.Byte - 71))
                            | (1 << (SolidityParser.Fixed - 71))
                            | (1 << (SolidityParser.Ufixed - 71))
                            | (1 << (SolidityParser.BooleanLiteral - 71))
                            | (1 << (SolidityParser.DecimalNumber - 71))
                            | (1 << (SolidityParser.HexNumber - 71))
                            | (1 << (SolidityParser.HexLiteralFragment - 71))
                            | (1 << (SolidityParser.LeaveKeyword - 71))
                            | (1 << (SolidityParser.PayableKeyword - 71))
                            | (1 << (SolidityParser.TypeKeyword - 71))
                            | (1 << (SolidityParser.GlobalKeyword - 71))
                            | (1 << (SolidityParser.ConstructorKeyword - 71))
                            | (1 << (SolidityParser.ReceiveKeyword - 71))
                            | (1 << (SolidityParser.Identifier - 71))
                            | (1 << (SolidityParser.StringLiteralFragment - 71))
                        )
                    )
                    != 0
                ):
                    self.state = 325
                    self.expressionList()

                self.state = 328
                self.match(SolidityParser.T__23)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContractPartContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(
                SolidityParser.StateVariableDeclarationContext, 0
            )

        def usingForDeclaration(self):
            return self.getTypedRuleContext(
                SolidityParser.UsingForDeclarationContext, 0
            )

        def structDefinition(self):
            return self.getTypedRuleContext(SolidityParser.StructDefinitionContext, 0)

        def modifierDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ModifierDefinitionContext, 0)

        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext, 0)

        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EventDefinitionContext, 0)

        def enumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext, 0)

        def customErrorDefinition(self):
            return self.getTypedRuleContext(
                SolidityParser.CustomErrorDefinitionContext, 0
            )

        def typeDefinition(self):
            return self.getTypedRuleContext(SolidityParser.TypeDefinitionContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_contractPart

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterContractPart"):
                listener.enterContractPart(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitContractPart"):
                listener.exitContractPart(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitContractPart"):
                return visitor.visitContractPart(self)
            else:
                return visitor.visitChildren(self)

    def contractPart(self):
        localctx = SolidityParser.ContractPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_contractPart)
        try:
            self.state = 340
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 20, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 331
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 332
                self.usingForDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 333
                self.structDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 334
                self.modifierDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 335
                self.functionDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 336
                self.eventDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 337
                self.enumDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 338
                self.customErrorDefinition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 339
                self.typeDefinition()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StateVariableDeclarationContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def PublicKeyword(self, i: int = None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i: int = None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i: int = None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def ConstantKeyword(self, i: int = None):
            if i is None:
                return self.getTokens(SolidityParser.ConstantKeyword)
            else:
                return self.getToken(SolidityParser.ConstantKeyword, i)

        def ImmutableKeyword(self, i: int = None):
            if i is None:
                return self.getTokens(SolidityParser.ImmutableKeyword)
            else:
                return self.getToken(SolidityParser.ImmutableKeyword, i)

        def overrideSpecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.OverrideSpecifierContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.OverrideSpecifierContext, i
                )

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateVariableDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStateVariableDeclaration"):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStateVariableDeclaration"):
                listener.exitStateVariableDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStateVariableDeclaration"):
                return visitor.visitStateVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def stateVariableDeclaration(self):
        localctx = SolidityParser.StateVariableDeclarationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 26, self.RULE_stateVariableDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.typeName(0)
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la - 96)) & ~0x3F) == 0 and (
                (1 << (_la - 96))
                & (
                    (1 << (SolidityParser.T__95 - 96))
                    | (1 << (SolidityParser.ConstantKeyword - 96))
                    | (1 << (SolidityParser.ImmutableKeyword - 96))
                    | (1 << (SolidityParser.InternalKeyword - 96))
                    | (1 << (SolidityParser.PrivateKeyword - 96))
                    | (1 << (SolidityParser.PublicKeyword - 96))
                )
            ) != 0:
                self.state = 349
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.PublicKeyword]:
                    self.state = 343
                    self.match(SolidityParser.PublicKeyword)
                    pass
                elif token in [SolidityParser.InternalKeyword]:
                    self.state = 344
                    self.match(SolidityParser.InternalKeyword)
                    pass
                elif token in [SolidityParser.PrivateKeyword]:
                    self.state = 345
                    self.match(SolidityParser.PrivateKeyword)
                    pass
                elif token in [SolidityParser.ConstantKeyword]:
                    self.state = 346
                    self.match(SolidityParser.ConstantKeyword)
                    pass
                elif token in [SolidityParser.ImmutableKeyword]:
                    self.state = 347
                    self.match(SolidityParser.ImmutableKeyword)
                    pass
                elif token in [SolidityParser.T__95]:
                    self.state = 348
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 354
            self.identifier()
            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.T__10:
                self.state = 355
                self.match(SolidityParser.T__10)
                self.state = 356
                self.expression(0)

            self.state = 359
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FileLevelConstantContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext, 0)

        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_fileLevelConstant

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFileLevelConstant"):
                listener.enterFileLevelConstant(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFileLevelConstant"):
                listener.exitFileLevelConstant(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFileLevelConstant"):
                return visitor.visitFileLevelConstant(self)
            else:
                return visitor.visitChildren(self)

    def fileLevelConstant(self):
        localctx = SolidityParser.FileLevelConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fileLevelConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.typeName(0)
            self.state = 362
            self.match(SolidityParser.ConstantKeyword)
            self.state = 363
            self.identifier()
            self.state = 364
            self.match(SolidityParser.T__10)
            self.state = 365
            self.expression(0)
            self.state = 366
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CustomErrorDefinitionContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_customErrorDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCustomErrorDefinition"):
                listener.enterCustomErrorDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCustomErrorDefinition"):
                listener.exitCustomErrorDefinition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCustomErrorDefinition"):
                return visitor.visitCustomErrorDefinition(self)
            else:
                return visitor.visitChildren(self)

    def customErrorDefinition(self):
        localctx = SolidityParser.CustomErrorDefinitionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 30, self.RULE_customErrorDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.match(SolidityParser.T__24)
            self.state = 369
            self.identifier()
            self.state = 370
            self.parameterList()
            self.state = 371
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDefinitionContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_typeDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeDefinition"):
                listener.enterTypeDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeDefinition"):
                listener.exitTypeDefinition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeDefinition"):
                return visitor.visitTypeDefinition(self)
            else:
                return visitor.visitChildren(self)

    def typeDefinition(self):
        localctx = SolidityParser.TypeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(SolidityParser.TypeKeyword)
            self.state = 374
            self.identifier()
            self.state = 375
            self.match(SolidityParser.T__21)
            self.state = 376
            self.elementaryTypeName()
            self.state = 377
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UsingForDeclarationContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def usingForObject(self):
            return self.getTypedRuleContext(SolidityParser.UsingForObjectContext, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext, 0)

        def GlobalKeyword(self):
            return self.getToken(SolidityParser.GlobalKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_usingForDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUsingForDeclaration"):
                listener.enterUsingForDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUsingForDeclaration"):
                listener.exitUsingForDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUsingForDeclaration"):
                return visitor.visitUsingForDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def usingForDeclaration(self):
        localctx = SolidityParser.UsingForDeclarationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 34, self.RULE_usingForDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(SolidityParser.T__25)
            self.state = 380
            self.usingForObject()
            self.state = 381
            self.match(SolidityParser.T__26)
            self.state = 384
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__2]:
                self.state = 382
                self.match(SolidityParser.T__2)
                pass
            elif token in [
                SolidityParser.T__13,
                SolidityParser.T__24,
                SolidityParser.T__37,
                SolidityParser.T__43,
                SolidityParser.T__45,
                SolidityParser.T__49,
                SolidityParser.T__61,
                SolidityParser.T__62,
                SolidityParser.T__63,
                SolidityParser.T__64,
                SolidityParser.T__65,
                SolidityParser.T__94,
                SolidityParser.Int,
                SolidityParser.Uint,
                SolidityParser.Byte,
                SolidityParser.Fixed,
                SolidityParser.Ufixed,
                SolidityParser.LeaveKeyword,
                SolidityParser.PayableKeyword,
                SolidityParser.GlobalKeyword,
                SolidityParser.ConstructorKeyword,
                SolidityParser.ReceiveKeyword,
                SolidityParser.Identifier,
            ]:
                self.state = 383
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.GlobalKeyword:
                self.state = 386
                self.match(SolidityParser.GlobalKeyword)

            self.state = 389
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UsingForObjectContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(
                SolidityParser.UserDefinedTypeNameContext, 0
            )

        def usingForObjectDirective(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.UsingForObjectDirectiveContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.UsingForObjectDirectiveContext, i
                )

        def getRuleIndex(self):
            return SolidityParser.RULE_usingForObject

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUsingForObject"):
                listener.enterUsingForObject(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUsingForObject"):
                listener.exitUsingForObject(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUsingForObject"):
                return visitor.visitUsingForObject(self)
            else:
                return visitor.visitChildren(self)

    def usingForObject(self):
        localctx = SolidityParser.UsingForObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_usingForObject)
        self._la = 0  # Token type
        try:
            self.state = 403
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                SolidityParser.T__13,
                SolidityParser.T__24,
                SolidityParser.T__43,
                SolidityParser.T__49,
                SolidityParser.T__61,
                SolidityParser.T__94,
                SolidityParser.LeaveKeyword,
                SolidityParser.PayableKeyword,
                SolidityParser.GlobalKeyword,
                SolidityParser.ConstructorKeyword,
                SolidityParser.ReceiveKeyword,
                SolidityParser.Identifier,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 391
                self.userDefinedTypeName()
                pass
            elif token in [SolidityParser.T__14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 392
                self.match(SolidityParser.T__14)
                self.state = 393
                self.usingForObjectDirective()
                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SolidityParser.T__15:
                    self.state = 394
                    self.match(SolidityParser.T__15)
                    self.state = 395
                    self.usingForObjectDirective()
                    self.state = 400
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 401
                self.match(SolidityParser.T__16)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UsingForObjectDirectiveContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(
                SolidityParser.UserDefinedTypeNameContext, 0
            )

        def userDefinableOperators(self):
            return self.getTypedRuleContext(
                SolidityParser.UserDefinableOperatorsContext, 0
            )

        def getRuleIndex(self):
            return SolidityParser.RULE_usingForObjectDirective

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUsingForObjectDirective"):
                listener.enterUsingForObjectDirective(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUsingForObjectDirective"):
                listener.exitUsingForObjectDirective(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUsingForObjectDirective"):
                return visitor.visitUsingForObjectDirective(self)
            else:
                return visitor.visitChildren(self)

    def usingForObjectDirective(self):
        localctx = SolidityParser.UsingForObjectDirectiveContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 38, self.RULE_usingForObjectDirective)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.userDefinedTypeName()
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.T__11:
                self.state = 406
                self.match(SolidityParser.T__11)
                self.state = 407
                self.userDefinableOperators()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UserDefinableOperatorsContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinableOperators

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUserDefinableOperators"):
                listener.enterUserDefinableOperators(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUserDefinableOperators"):
                listener.exitUserDefinableOperators(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUserDefinableOperators"):
                return visitor.visitUserDefinableOperators(self)
            else:
                return visitor.visitChildren(self)

    def userDefinableOperators(self):
        localctx = SolidityParser.UserDefinableOperatorsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 40, self.RULE_userDefinableOperators)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SolidityParser.T__2)
                            | (1 << SolidityParser.T__4)
                            | (1 << SolidityParser.T__5)
                            | (1 << SolidityParser.T__6)
                            | (1 << SolidityParser.T__7)
                            | (1 << SolidityParser.T__8)
                            | (1 << SolidityParser.T__9)
                            | (1 << SolidityParser.T__27)
                            | (1 << SolidityParser.T__28)
                            | (1 << SolidityParser.T__29)
                            | (1 << SolidityParser.T__30)
                            | (1 << SolidityParser.T__31)
                            | (1 << SolidityParser.T__32)
                            | (1 << SolidityParser.T__33)
                            | (1 << SolidityParser.T__34)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructDefinitionContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def variableDeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.VariableDeclarationContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.VariableDeclarationContext, i
                )

        def getRuleIndex(self):
            return SolidityParser.RULE_structDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStructDefinition"):
                listener.enterStructDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStructDefinition"):
                listener.exitStructDefinition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStructDefinition"):
                return visitor.visitStructDefinition(self)
            else:
                return visitor.visitChildren(self)

    def structDefinition(self):
        localctx = SolidityParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_structDefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.match(SolidityParser.T__35)
            self.state = 413
            self.identifier()
            self.state = 414
            self.match(SolidityParser.T__14)
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (((_la - 14)) & ~0x3F) == 0
                and (
                    (1 << (_la - 14))
                    & (
                        (1 << (SolidityParser.T__13 - 14))
                        | (1 << (SolidityParser.T__24 - 14))
                        | (1 << (SolidityParser.T__37 - 14))
                        | (1 << (SolidityParser.T__43 - 14))
                        | (1 << (SolidityParser.T__45 - 14))
                        | (1 << (SolidityParser.T__49 - 14))
                        | (1 << (SolidityParser.T__61 - 14))
                        | (1 << (SolidityParser.T__62 - 14))
                        | (1 << (SolidityParser.T__63 - 14))
                        | (1 << (SolidityParser.T__64 - 14))
                        | (1 << (SolidityParser.T__65 - 14))
                    )
                )
                != 0
            ) or (
                (((_la - 95)) & ~0x3F) == 0
                and (
                    (1 << (_la - 95))
                    & (
                        (1 << (SolidityParser.T__94 - 95))
                        | (1 << (SolidityParser.Int - 95))
                        | (1 << (SolidityParser.Uint - 95))
                        | (1 << (SolidityParser.Byte - 95))
                        | (1 << (SolidityParser.Fixed - 95))
                        | (1 << (SolidityParser.Ufixed - 95))
                        | (1 << (SolidityParser.LeaveKeyword - 95))
                        | (1 << (SolidityParser.PayableKeyword - 95))
                        | (1 << (SolidityParser.GlobalKeyword - 95))
                        | (1 << (SolidityParser.ConstructorKeyword - 95))
                        | (1 << (SolidityParser.ReceiveKeyword - 95))
                        | (1 << (SolidityParser.Identifier - 95))
                    )
                )
                != 0
            ):
                self.state = 415
                self.variableDeclaration()
                self.state = 416
                self.match(SolidityParser.T__1)
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    (((_la - 14)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 14))
                        & (
                            (1 << (SolidityParser.T__13 - 14))
                            | (1 << (SolidityParser.T__24 - 14))
                            | (1 << (SolidityParser.T__37 - 14))
                            | (1 << (SolidityParser.T__43 - 14))
                            | (1 << (SolidityParser.T__45 - 14))
                            | (1 << (SolidityParser.T__49 - 14))
                            | (1 << (SolidityParser.T__61 - 14))
                            | (1 << (SolidityParser.T__62 - 14))
                            | (1 << (SolidityParser.T__63 - 14))
                            | (1 << (SolidityParser.T__64 - 14))
                            | (1 << (SolidityParser.T__65 - 14))
                        )
                    )
                    != 0
                ) or (
                    (((_la - 95)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 95))
                        & (
                            (1 << (SolidityParser.T__94 - 95))
                            | (1 << (SolidityParser.Int - 95))
                            | (1 << (SolidityParser.Uint - 95))
                            | (1 << (SolidityParser.Byte - 95))
                            | (1 << (SolidityParser.Fixed - 95))
                            | (1 << (SolidityParser.Ufixed - 95))
                            | (1 << (SolidityParser.LeaveKeyword - 95))
                            | (1 << (SolidityParser.PayableKeyword - 95))
                            | (1 << (SolidityParser.GlobalKeyword - 95))
                            | (1 << (SolidityParser.ConstructorKeyword - 95))
                            | (1 << (SolidityParser.ReceiveKeyword - 95))
                            | (1 << (SolidityParser.Identifier - 95))
                        )
                    )
                    != 0
                ):
                    self.state = 417
                    self.variableDeclaration()
                    self.state = 418
                    self.match(SolidityParser.T__1)
                    self.state = 424
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 427
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierDefinitionContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext, 0)

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext, 0)

        def VirtualKeyword(self, i: int = None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.OverrideSpecifierContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.OverrideSpecifierContext, i
                )

        def getRuleIndex(self):
            return SolidityParser.RULE_modifierDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModifierDefinition"):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModifierDefinition"):
                listener.exitModifierDefinition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitModifierDefinition"):
                return visitor.visitModifierDefinition(self)
            else:
                return visitor.visitChildren(self)

    def modifierDefinition(self):
        localctx = SolidityParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_modifierDefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.match(SolidityParser.T__36)
            self.state = 430
            self.identifier()
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.T__22:
                self.state = 431
                self.parameterList()

            self.state = 438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SolidityParser.T__95 or _la == SolidityParser.VirtualKeyword:
                self.state = 436
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.VirtualKeyword]:
                    self.state = 434
                    self.match(SolidityParser.VirtualKeyword)
                    pass
                elif token in [SolidityParser.T__95]:
                    self.state = 435
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 443
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__1]:
                self.state = 441
                self.match(SolidityParser.T__1)
                pass
            elif token in [SolidityParser.T__14]:
                self.state = 442
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierInvocationContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_modifierInvocation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModifierInvocation"):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModifierInvocation"):
                listener.exitModifierInvocation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitModifierInvocation"):
                return visitor.visitModifierInvocation(self)
            else:
                return visitor.visitChildren(self)

    def modifierInvocation(self):
        localctx = SolidityParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_modifierInvocation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self.identifier()
            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.T__22:
                self.state = 446
                self.match(SolidityParser.T__22)
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (((_la - 6)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 6))
                        & (
                            (1 << (SolidityParser.T__5 - 6))
                            | (1 << (SolidityParser.T__13 - 6))
                            | (1 << (SolidityParser.T__22 - 6))
                            | (1 << (SolidityParser.T__24 - 6))
                            | (1 << (SolidityParser.T__29 - 6))
                            | (1 << (SolidityParser.T__30 - 6))
                            | (1 << (SolidityParser.T__37 - 6))
                            | (1 << (SolidityParser.T__41 - 6))
                            | (1 << (SolidityParser.T__43 - 6))
                            | (1 << (SolidityParser.T__45 - 6))
                            | (1 << (SolidityParser.T__49 - 6))
                            | (1 << (SolidityParser.T__61 - 6))
                            | (1 << (SolidityParser.T__62 - 6))
                            | (1 << (SolidityParser.T__63 - 6))
                            | (1 << (SolidityParser.T__64 - 6))
                            | (1 << (SolidityParser.T__65 - 6))
                            | (1 << (SolidityParser.T__66 - 6))
                            | (1 << (SolidityParser.T__67 - 6))
                            | (1 << (SolidityParser.T__68 - 6))
                        )
                    )
                    != 0
                ) or (
                    (((_la - 71)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 71))
                        & (
                            (1 << (SolidityParser.T__70 - 71))
                            | (1 << (SolidityParser.T__71 - 71))
                            | (1 << (SolidityParser.T__94 - 71))
                            | (1 << (SolidityParser.Int - 71))
                            | (1 << (SolidityParser.Uint - 71))
                            | (1 << (SolidityParser.Byte - 71))
                            | (1 << (SolidityParser.Fixed - 71))
                            | (1 << (SolidityParser.Ufixed - 71))
                            | (1 << (SolidityParser.BooleanLiteral - 71))
                            | (1 << (SolidityParser.DecimalNumber - 71))
                            | (1 << (SolidityParser.HexNumber - 71))
                            | (1 << (SolidityParser.HexLiteralFragment - 71))
                            | (1 << (SolidityParser.LeaveKeyword - 71))
                            | (1 << (SolidityParser.PayableKeyword - 71))
                            | (1 << (SolidityParser.TypeKeyword - 71))
                            | (1 << (SolidityParser.GlobalKeyword - 71))
                            | (1 << (SolidityParser.ConstructorKeyword - 71))
                            | (1 << (SolidityParser.ReceiveKeyword - 71))
                            | (1 << (SolidityParser.Identifier - 71))
                            | (1 << (SolidityParser.StringLiteralFragment - 71))
                        )
                    )
                    != 0
                ):
                    self.state = 447
                    self.expressionList()

                self.state = 450
                self.match(SolidityParser.T__23)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDefinitionContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDescriptor(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDescriptorContext, 0)

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext, 0)

        def modifierList(self):
            return self.getTypedRuleContext(SolidityParser.ModifierListContext, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext, 0)

        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_functionDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionDefinition"):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionDefinition"):
                listener.exitFunctionDefinition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctionDefinition"):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)

    def functionDefinition(self):
        localctx = SolidityParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_functionDefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self.functionDescriptor()
            self.state = 454
            self.parameterList()
            self.state = 455
            self.modifierList()
            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.T__38:
                self.state = 456
                self.returnParameters()

            self.state = 461
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__1]:
                self.state = 459
                self.match(SolidityParser.T__1)
                pass
            elif token in [SolidityParser.T__14]:
                self.state = 460
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDescriptorContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def ConstructorKeyword(self):
            return self.getToken(SolidityParser.ConstructorKeyword, 0)

        def FallbackKeyword(self):
            return self.getToken(SolidityParser.FallbackKeyword, 0)

        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_functionDescriptor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionDescriptor"):
                listener.enterFunctionDescriptor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionDescriptor"):
                listener.exitFunctionDescriptor(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctionDescriptor"):
                return visitor.visitFunctionDescriptor(self)
            else:
                return visitor.visitChildren(self)

    def functionDescriptor(self):
        localctx = SolidityParser.FunctionDescriptorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_functionDescriptor)
        self._la = 0  # Token type
        try:
            self.state = 470
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 463
                self.match(SolidityParser.T__37)
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SolidityParser.T__13)
                            | (1 << SolidityParser.T__24)
                            | (1 << SolidityParser.T__43)
                            | (1 << SolidityParser.T__49)
                            | (1 << SolidityParser.T__61)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 95)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 95))
                        & (
                            (1 << (SolidityParser.T__94 - 95))
                            | (1 << (SolidityParser.LeaveKeyword - 95))
                            | (1 << (SolidityParser.PayableKeyword - 95))
                            | (1 << (SolidityParser.GlobalKeyword - 95))
                            | (1 << (SolidityParser.ConstructorKeyword - 95))
                            | (1 << (SolidityParser.ReceiveKeyword - 95))
                            | (1 << (SolidityParser.Identifier - 95))
                        )
                    )
                    != 0
                ):
                    self.state = 464
                    self.identifier()

                pass
            elif token in [SolidityParser.ConstructorKeyword]:
                self.enterOuterAlt(localctx, 2)
                self.state = 467
                self.match(SolidityParser.ConstructorKeyword)
                pass
            elif token in [SolidityParser.FallbackKeyword]:
                self.enterOuterAlt(localctx, 3)
                self.state = 468
                self.match(SolidityParser.FallbackKeyword)
                pass
            elif token in [SolidityParser.ReceiveKeyword]:
                self.enterOuterAlt(localctx, 4)
                self.state = 469
                self.match(SolidityParser.ReceiveKeyword)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnParametersContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_returnParameters

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReturnParameters"):
                listener.enterReturnParameters(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReturnParameters"):
                listener.exitReturnParameters(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReturnParameters"):
                return visitor.visitReturnParameters(self)
            else:
                return visitor.visitChildren(self)

    def returnParameters(self):
        localctx = SolidityParser.ReturnParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_returnParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.match(SolidityParser.T__38)
            self.state = 473
            self.parameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierListContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExternalKeyword(self, i: int = None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def PublicKeyword(self, i: int = None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i: int = None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i: int = None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def VirtualKeyword(self, i: int = None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def stateMutability(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(
                    SolidityParser.StateMutabilityContext, i
                )

        def modifierInvocation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.ModifierInvocationContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.ModifierInvocationContext, i
                )

        def overrideSpecifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.OverrideSpecifierContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.OverrideSpecifierContext, i
                )

        def getRuleIndex(self):
            return SolidityParser.RULE_modifierList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModifierList"):
                listener.enterModifierList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModifierList"):
                listener.exitModifierList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitModifierList"):
                return visitor.visitModifierList(self)
            else:
                return visitor.visitChildren(self)

    def modifierList(self):
        localctx = SolidityParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_modifierList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << SolidityParser.T__13)
                        | (1 << SolidityParser.T__24)
                        | (1 << SolidityParser.T__43)
                        | (1 << SolidityParser.T__49)
                        | (1 << SolidityParser.T__61)
                    )
                )
                != 0
            ) or (
                (((_la - 95)) & ~0x3F) == 0
                and (
                    (1 << (_la - 95))
                    & (
                        (1 << (SolidityParser.T__94 - 95))
                        | (1 << (SolidityParser.T__95 - 95))
                        | (1 << (SolidityParser.ConstantKeyword - 95))
                        | (1 << (SolidityParser.LeaveKeyword - 95))
                        | (1 << (SolidityParser.ExternalKeyword - 95))
                        | (1 << (SolidityParser.InternalKeyword - 95))
                        | (1 << (SolidityParser.PayableKeyword - 95))
                        | (1 << (SolidityParser.PrivateKeyword - 95))
                        | (1 << (SolidityParser.PublicKeyword - 95))
                        | (1 << (SolidityParser.VirtualKeyword - 95))
                        | (1 << (SolidityParser.PureKeyword - 95))
                        | (1 << (SolidityParser.ViewKeyword - 95))
                        | (1 << (SolidityParser.GlobalKeyword - 95))
                        | (1 << (SolidityParser.ConstructorKeyword - 95))
                        | (1 << (SolidityParser.ReceiveKeyword - 95))
                        | (1 << (SolidityParser.Identifier - 95))
                    )
                )
                != 0
            ):
                self.state = 483
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 41, self._ctx)
                if la_ == 1:
                    self.state = 475
                    self.match(SolidityParser.ExternalKeyword)
                    pass

                elif la_ == 2:
                    self.state = 476
                    self.match(SolidityParser.PublicKeyword)
                    pass

                elif la_ == 3:
                    self.state = 477
                    self.match(SolidityParser.InternalKeyword)
                    pass

                elif la_ == 4:
                    self.state = 478
                    self.match(SolidityParser.PrivateKeyword)
                    pass

                elif la_ == 5:
                    self.state = 479
                    self.match(SolidityParser.VirtualKeyword)
                    pass

                elif la_ == 6:
                    self.state = 480
                    self.stateMutability()
                    pass

                elif la_ == 7:
                    self.state = 481
                    self.modifierInvocation()
                    pass

                elif la_ == 8:
                    self.state = 482
                    self.overrideSpecifier()
                    pass

                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventDefinitionContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def eventParameterList(self):
            return self.getTypedRuleContext(SolidityParser.EventParameterListContext, 0)

        def AnonymousKeyword(self):
            return self.getToken(SolidityParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEventDefinition"):
                listener.enterEventDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEventDefinition"):
                listener.exitEventDefinition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEventDefinition"):
                return visitor.visitEventDefinition(self)
            else:
                return visitor.visitChildren(self)

    def eventDefinition(self):
        localctx = SolidityParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_eventDefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.match(SolidityParser.T__39)
            self.state = 489
            self.identifier()
            self.state = 490
            self.eventParameterList()
            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.AnonymousKeyword:
                self.state = 491
                self.match(SolidityParser.AnonymousKeyword)

            self.state = 494
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumValueContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_enumValue

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumValue"):
                listener.enterEnumValue(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumValue"):
                listener.exitEnumValue(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEnumValue"):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)

    def enumValue(self):
        localctx = SolidityParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumDefinitionContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def enumValue(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumValueContext, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_enumDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumDefinition"):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumDefinition"):
                listener.exitEnumDefinition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEnumDefinition"):
                return visitor.visitEnumDefinition(self)
            else:
                return visitor.visitChildren(self)

    def enumDefinition(self):
        localctx = SolidityParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_enumDefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.match(SolidityParser.T__40)
            self.state = 499
            self.identifier()
            self.state = 500
            self.match(SolidityParser.T__14)
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << SolidityParser.T__13)
                        | (1 << SolidityParser.T__24)
                        | (1 << SolidityParser.T__43)
                        | (1 << SolidityParser.T__49)
                        | (1 << SolidityParser.T__61)
                    )
                )
                != 0
            ) or (
                (((_la - 95)) & ~0x3F) == 0
                and (
                    (1 << (_la - 95))
                    & (
                        (1 << (SolidityParser.T__94 - 95))
                        | (1 << (SolidityParser.LeaveKeyword - 95))
                        | (1 << (SolidityParser.PayableKeyword - 95))
                        | (1 << (SolidityParser.GlobalKeyword - 95))
                        | (1 << (SolidityParser.ConstructorKeyword - 95))
                        | (1 << (SolidityParser.ReceiveKeyword - 95))
                        | (1 << (SolidityParser.Identifier - 95))
                    )
                )
                != 0
            ):
                self.state = 501
                self.enumValue()

            self.state = 508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SolidityParser.T__15:
                self.state = 504
                self.match(SolidityParser.T__15)
                self.state = 505
                self.enumValue()
                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 511
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterListContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterContext, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_parameterList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterList"):
                listener.enterParameterList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterList"):
                listener.exitParameterList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameterList"):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)

    def parameterList(self):
        localctx = SolidityParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_parameterList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.match(SolidityParser.T__22)
            self.state = 522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (((_la - 14)) & ~0x3F) == 0
                and (
                    (1 << (_la - 14))
                    & (
                        (1 << (SolidityParser.T__13 - 14))
                        | (1 << (SolidityParser.T__24 - 14))
                        | (1 << (SolidityParser.T__37 - 14))
                        | (1 << (SolidityParser.T__43 - 14))
                        | (1 << (SolidityParser.T__45 - 14))
                        | (1 << (SolidityParser.T__49 - 14))
                        | (1 << (SolidityParser.T__61 - 14))
                        | (1 << (SolidityParser.T__62 - 14))
                        | (1 << (SolidityParser.T__63 - 14))
                        | (1 << (SolidityParser.T__64 - 14))
                        | (1 << (SolidityParser.T__65 - 14))
                    )
                )
                != 0
            ) or (
                (((_la - 95)) & ~0x3F) == 0
                and (
                    (1 << (_la - 95))
                    & (
                        (1 << (SolidityParser.T__94 - 95))
                        | (1 << (SolidityParser.Int - 95))
                        | (1 << (SolidityParser.Uint - 95))
                        | (1 << (SolidityParser.Byte - 95))
                        | (1 << (SolidityParser.Fixed - 95))
                        | (1 << (SolidityParser.Ufixed - 95))
                        | (1 << (SolidityParser.LeaveKeyword - 95))
                        | (1 << (SolidityParser.PayableKeyword - 95))
                        | (1 << (SolidityParser.GlobalKeyword - 95))
                        | (1 << (SolidityParser.ConstructorKeyword - 95))
                        | (1 << (SolidityParser.ReceiveKeyword - 95))
                        | (1 << (SolidityParser.Identifier - 95))
                    )
                )
                != 0
            ):
                self.state = 514
                self.parameter()
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SolidityParser.T__15:
                    self.state = 515
                    self.match(SolidityParser.T__15)
                    self.state = 516
                    self.parameter()
                    self.state = 521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 524
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext, 0)

        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_parameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameter"):
                listener.enterParameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameter"):
                listener.exitParameter(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameter"):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)

    def parameter(self):
        localctx = SolidityParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_parameter)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.typeName(0)
            self.state = 528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 48, self._ctx)
            if la_ == 1:
                self.state = 527
                self.storageLocation()

            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << SolidityParser.T__13)
                        | (1 << SolidityParser.T__24)
                        | (1 << SolidityParser.T__43)
                        | (1 << SolidityParser.T__49)
                        | (1 << SolidityParser.T__61)
                    )
                )
                != 0
            ) or (
                (((_la - 95)) & ~0x3F) == 0
                and (
                    (1 << (_la - 95))
                    & (
                        (1 << (SolidityParser.T__94 - 95))
                        | (1 << (SolidityParser.LeaveKeyword - 95))
                        | (1 << (SolidityParser.PayableKeyword - 95))
                        | (1 << (SolidityParser.GlobalKeyword - 95))
                        | (1 << (SolidityParser.ConstructorKeyword - 95))
                        | (1 << (SolidityParser.ReceiveKeyword - 95))
                        | (1 << (SolidityParser.Identifier - 95))
                    )
                )
                != 0
            ):
                self.state = 530
                self.identifier()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventParameterListContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventParameter(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventParameterContext, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameterList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEventParameterList"):
                listener.enterEventParameterList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEventParameterList"):
                listener.exitEventParameterList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEventParameterList"):
                return visitor.visitEventParameterList(self)
            else:
                return visitor.visitChildren(self)

    def eventParameterList(self):
        localctx = SolidityParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_eventParameterList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.match(SolidityParser.T__22)
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (((_la - 14)) & ~0x3F) == 0
                and (
                    (1 << (_la - 14))
                    & (
                        (1 << (SolidityParser.T__13 - 14))
                        | (1 << (SolidityParser.T__24 - 14))
                        | (1 << (SolidityParser.T__37 - 14))
                        | (1 << (SolidityParser.T__43 - 14))
                        | (1 << (SolidityParser.T__45 - 14))
                        | (1 << (SolidityParser.T__49 - 14))
                        | (1 << (SolidityParser.T__61 - 14))
                        | (1 << (SolidityParser.T__62 - 14))
                        | (1 << (SolidityParser.T__63 - 14))
                        | (1 << (SolidityParser.T__64 - 14))
                        | (1 << (SolidityParser.T__65 - 14))
                    )
                )
                != 0
            ) or (
                (((_la - 95)) & ~0x3F) == 0
                and (
                    (1 << (_la - 95))
                    & (
                        (1 << (SolidityParser.T__94 - 95))
                        | (1 << (SolidityParser.Int - 95))
                        | (1 << (SolidityParser.Uint - 95))
                        | (1 << (SolidityParser.Byte - 95))
                        | (1 << (SolidityParser.Fixed - 95))
                        | (1 << (SolidityParser.Ufixed - 95))
                        | (1 << (SolidityParser.LeaveKeyword - 95))
                        | (1 << (SolidityParser.PayableKeyword - 95))
                        | (1 << (SolidityParser.GlobalKeyword - 95))
                        | (1 << (SolidityParser.ConstructorKeyword - 95))
                        | (1 << (SolidityParser.ReceiveKeyword - 95))
                        | (1 << (SolidityParser.Identifier - 95))
                    )
                )
                != 0
            ):
                self.state = 534
                self.eventParameter()
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SolidityParser.T__15:
                    self.state = 535
                    self.match(SolidityParser.T__15)
                    self.state = 536
                    self.eventParameter()
                    self.state = 541
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 544
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventParameterContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext, 0)

        def IndexedKeyword(self):
            return self.getToken(SolidityParser.IndexedKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEventParameter"):
                listener.enterEventParameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEventParameter"):
                listener.exitEventParameter(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEventParameter"):
                return visitor.visitEventParameter(self)
            else:
                return visitor.visitChildren(self)

    def eventParameter(self):
        localctx = SolidityParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_eventParameter)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.typeName(0)
            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.IndexedKeyword:
                self.state = 547
                self.match(SolidityParser.IndexedKeyword)

            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << SolidityParser.T__13)
                        | (1 << SolidityParser.T__24)
                        | (1 << SolidityParser.T__43)
                        | (1 << SolidityParser.T__49)
                        | (1 << SolidityParser.T__61)
                    )
                )
                != 0
            ) or (
                (((_la - 95)) & ~0x3F) == 0
                and (
                    (1 << (_la - 95))
                    & (
                        (1 << (SolidityParser.T__94 - 95))
                        | (1 << (SolidityParser.LeaveKeyword - 95))
                        | (1 << (SolidityParser.PayableKeyword - 95))
                        | (1 << (SolidityParser.GlobalKeyword - 95))
                        | (1 << (SolidityParser.ConstructorKeyword - 95))
                        | (1 << (SolidityParser.ReceiveKeyword - 95))
                        | (1 << (SolidityParser.Identifier - 95))
                    )
                )
                != 0
            ):
                self.state = 550
                self.identifier()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTypeParameterListContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameter(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.FunctionTypeParameterContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.FunctionTypeParameterContext, i
                )

        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameterList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionTypeParameterList"):
                listener.enterFunctionTypeParameterList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionTypeParameterList"):
                listener.exitFunctionTypeParameterList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctionTypeParameterList"):
                return visitor.visitFunctionTypeParameterList(self)
            else:
                return visitor.visitChildren(self)

    def functionTypeParameterList(self):
        localctx = SolidityParser.FunctionTypeParameterListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 70, self.RULE_functionTypeParameterList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.match(SolidityParser.T__22)
            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (((_la - 14)) & ~0x3F) == 0
                and (
                    (1 << (_la - 14))
                    & (
                        (1 << (SolidityParser.T__13 - 14))
                        | (1 << (SolidityParser.T__24 - 14))
                        | (1 << (SolidityParser.T__37 - 14))
                        | (1 << (SolidityParser.T__43 - 14))
                        | (1 << (SolidityParser.T__45 - 14))
                        | (1 << (SolidityParser.T__49 - 14))
                        | (1 << (SolidityParser.T__61 - 14))
                        | (1 << (SolidityParser.T__62 - 14))
                        | (1 << (SolidityParser.T__63 - 14))
                        | (1 << (SolidityParser.T__64 - 14))
                        | (1 << (SolidityParser.T__65 - 14))
                    )
                )
                != 0
            ) or (
                (((_la - 95)) & ~0x3F) == 0
                and (
                    (1 << (_la - 95))
                    & (
                        (1 << (SolidityParser.T__94 - 95))
                        | (1 << (SolidityParser.Int - 95))
                        | (1 << (SolidityParser.Uint - 95))
                        | (1 << (SolidityParser.Byte - 95))
                        | (1 << (SolidityParser.Fixed - 95))
                        | (1 << (SolidityParser.Ufixed - 95))
                        | (1 << (SolidityParser.LeaveKeyword - 95))
                        | (1 << (SolidityParser.PayableKeyword - 95))
                        | (1 << (SolidityParser.GlobalKeyword - 95))
                        | (1 << (SolidityParser.ConstructorKeyword - 95))
                        | (1 << (SolidityParser.ReceiveKeyword - 95))
                        | (1 << (SolidityParser.Identifier - 95))
                    )
                )
                != 0
            ):
                self.state = 554
                self.functionTypeParameter()
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SolidityParser.T__15:
                    self.state = 555
                    self.match(SolidityParser.T__15)
                    self.state = 556
                    self.functionTypeParameter()
                    self.state = 561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

            self.state = 564
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTypeParameterContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext, 0)

        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeParameter

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionTypeParameter"):
                listener.enterFunctionTypeParameter(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionTypeParameter"):
                listener.exitFunctionTypeParameter(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctionTypeParameter"):
                return visitor.visitFunctionTypeParameter(self)
            else:
                return visitor.visitChildren(self)

    def functionTypeParameter(self):
        localctx = SolidityParser.FunctionTypeParameterContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 72, self.RULE_functionTypeParameter)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.typeName(0)
            self.state = 568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3F) == 0 and (
                (1 << _la)
                & (
                    (1 << SolidityParser.T__47)
                    | (1 << SolidityParser.T__48)
                    | (1 << SolidityParser.T__49)
                )
            ) != 0:
                self.state = 567
                self.storageLocation()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVariableDeclaration"):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVariableDeclaration"):
                listener.exitVariableDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVariableDeclaration"):
                return visitor.visitVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def variableDeclaration(self):
        localctx = SolidityParser.VariableDeclarationContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 74, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.typeName(0)
            self.state = 572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 57, self._ctx)
            if la_ == 1:
                self.state = 571
                self.storageLocation()

            self.state = 574
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext, 0)

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(
                SolidityParser.UserDefinedTypeNameContext, 0
            )

        def mapping(self):
            return self.getTypedRuleContext(SolidityParser.MappingContext, 0)

        def functionTypeName(self):
            return self.getTypedRuleContext(SolidityParser.FunctionTypeNameContext, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_typeName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeName"):
                listener.enterTypeName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeName"):
                listener.exitTypeName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeName"):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)

    def typeName(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_typeName, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 58, self._ctx)
            if la_ == 1:
                self.state = 577
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 578
                self.userDefinedTypeName()
                pass

            elif la_ == 3:
                self.state = 579
                self.mapping()
                pass

            elif la_ == 4:
                self.state = 580
                self.functionTypeName()
                pass

            elif la_ == 5:
                self.state = 581
                self.match(SolidityParser.T__43)
                self.state = 582
                self.match(SolidityParser.PayableKeyword)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 593
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 60, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SolidityParser.TypeNameContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_typeName
                    )
                    self.state = 585
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 3)"
                        )
                    self.state = 586
                    self.match(SolidityParser.T__41)
                    self.state = 588
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (
                        (((_la - 6)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 6))
                            & (
                                (1 << (SolidityParser.T__5 - 6))
                                | (1 << (SolidityParser.T__13 - 6))
                                | (1 << (SolidityParser.T__22 - 6))
                                | (1 << (SolidityParser.T__24 - 6))
                                | (1 << (SolidityParser.T__29 - 6))
                                | (1 << (SolidityParser.T__30 - 6))
                                | (1 << (SolidityParser.T__37 - 6))
                                | (1 << (SolidityParser.T__41 - 6))
                                | (1 << (SolidityParser.T__43 - 6))
                                | (1 << (SolidityParser.T__45 - 6))
                                | (1 << (SolidityParser.T__49 - 6))
                                | (1 << (SolidityParser.T__61 - 6))
                                | (1 << (SolidityParser.T__62 - 6))
                                | (1 << (SolidityParser.T__63 - 6))
                                | (1 << (SolidityParser.T__64 - 6))
                                | (1 << (SolidityParser.T__65 - 6))
                                | (1 << (SolidityParser.T__66 - 6))
                                | (1 << (SolidityParser.T__67 - 6))
                                | (1 << (SolidityParser.T__68 - 6))
                            )
                        )
                        != 0
                    ) or (
                        (((_la - 71)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 71))
                            & (
                                (1 << (SolidityParser.T__70 - 71))
                                | (1 << (SolidityParser.T__71 - 71))
                                | (1 << (SolidityParser.T__94 - 71))
                                | (1 << (SolidityParser.Int - 71))
                                | (1 << (SolidityParser.Uint - 71))
                                | (1 << (SolidityParser.Byte - 71))
                                | (1 << (SolidityParser.Fixed - 71))
                                | (1 << (SolidityParser.Ufixed - 71))
                                | (1 << (SolidityParser.BooleanLiteral - 71))
                                | (1 << (SolidityParser.DecimalNumber - 71))
                                | (1 << (SolidityParser.HexNumber - 71))
                                | (1 << (SolidityParser.HexLiteralFragment - 71))
                                | (1 << (SolidityParser.LeaveKeyword - 71))
                                | (1 << (SolidityParser.PayableKeyword - 71))
                                | (1 << (SolidityParser.TypeKeyword - 71))
                                | (1 << (SolidityParser.GlobalKeyword - 71))
                                | (1 << (SolidityParser.ConstructorKeyword - 71))
                                | (1 << (SolidityParser.ReceiveKeyword - 71))
                                | (1 << (SolidityParser.Identifier - 71))
                                | (1 << (SolidityParser.StringLiteralFragment - 71))
                            )
                        )
                        != 0
                    ):
                        self.state = 587
                        self.expression(0)

                    self.state = 590
                    self.match(SolidityParser.T__42)
                self.state = 595
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 60, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class UserDefinedTypeNameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinedTypeName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUserDefinedTypeName"):
                listener.enterUserDefinedTypeName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUserDefinedTypeName"):
                listener.exitUserDefinedTypeName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUserDefinedTypeName"):
                return visitor.visitUserDefinedTypeName(self)
            else:
                return visitor.visitChildren(self)

    def userDefinedTypeName(self):
        localctx = SolidityParser.UserDefinedTypeNameContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 78, self.RULE_userDefinedTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.identifier()
            self.state = 601
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 61, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 597
                    self.match(SolidityParser.T__44)
                    self.state = 598
                    self.identifier()
                self.state = 603
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 61, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MappingKeyContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext, 0)

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(
                SolidityParser.UserDefinedTypeNameContext, 0
            )

        def getRuleIndex(self):
            return SolidityParser.RULE_mappingKey

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMappingKey"):
                listener.enterMappingKey(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMappingKey"):
                listener.exitMappingKey(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMappingKey"):
                return visitor.visitMappingKey(self)
            else:
                return visitor.visitChildren(self)

    def mappingKey(self):
        localctx = SolidityParser.MappingKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_mappingKey)
        try:
            self.state = 606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 62, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 604
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 605
                self.userDefinedTypeName()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MappingContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mappingKey(self):
            return self.getTypedRuleContext(SolidityParser.MappingKeyContext, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext, 0)

        def mappingKeyName(self):
            return self.getTypedRuleContext(SolidityParser.MappingKeyNameContext, 0)

        def mappingValueName(self):
            return self.getTypedRuleContext(SolidityParser.MappingValueNameContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_mapping

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMapping"):
                listener.enterMapping(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMapping"):
                listener.exitMapping(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMapping"):
                return visitor.visitMapping(self)
            else:
                return visitor.visitChildren(self)

    def mapping(self):
        localctx = SolidityParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_mapping)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(SolidityParser.T__45)
            self.state = 609
            self.match(SolidityParser.T__22)
            self.state = 610
            self.mappingKey()
            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << SolidityParser.T__13)
                        | (1 << SolidityParser.T__24)
                        | (1 << SolidityParser.T__43)
                        | (1 << SolidityParser.T__49)
                        | (1 << SolidityParser.T__61)
                    )
                )
                != 0
            ) or (
                (((_la - 95)) & ~0x3F) == 0
                and (
                    (1 << (_la - 95))
                    & (
                        (1 << (SolidityParser.T__94 - 95))
                        | (1 << (SolidityParser.LeaveKeyword - 95))
                        | (1 << (SolidityParser.PayableKeyword - 95))
                        | (1 << (SolidityParser.GlobalKeyword - 95))
                        | (1 << (SolidityParser.ConstructorKeyword - 95))
                        | (1 << (SolidityParser.ReceiveKeyword - 95))
                        | (1 << (SolidityParser.Identifier - 95))
                    )
                )
                != 0
            ):
                self.state = 611
                self.mappingKeyName()

            self.state = 614
            self.match(SolidityParser.T__46)
            self.state = 615
            self.typeName(0)
            self.state = 617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << SolidityParser.T__13)
                        | (1 << SolidityParser.T__24)
                        | (1 << SolidityParser.T__43)
                        | (1 << SolidityParser.T__49)
                        | (1 << SolidityParser.T__61)
                    )
                )
                != 0
            ) or (
                (((_la - 95)) & ~0x3F) == 0
                and (
                    (1 << (_la - 95))
                    & (
                        (1 << (SolidityParser.T__94 - 95))
                        | (1 << (SolidityParser.LeaveKeyword - 95))
                        | (1 << (SolidityParser.PayableKeyword - 95))
                        | (1 << (SolidityParser.GlobalKeyword - 95))
                        | (1 << (SolidityParser.ConstructorKeyword - 95))
                        | (1 << (SolidityParser.ReceiveKeyword - 95))
                        | (1 << (SolidityParser.Identifier - 95))
                    )
                )
                != 0
            ):
                self.state = 616
                self.mappingValueName()

            self.state = 619
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MappingKeyNameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_mappingKeyName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMappingKeyName"):
                listener.enterMappingKeyName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMappingKeyName"):
                listener.exitMappingKeyName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMappingKeyName"):
                return visitor.visitMappingKeyName(self)
            else:
                return visitor.visitChildren(self)

    def mappingKeyName(self):
        localctx = SolidityParser.MappingKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_mappingKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MappingValueNameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_mappingValueName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMappingValueName"):
                listener.enterMappingValueName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMappingValueName"):
                listener.exitMappingValueName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMappingValueName"):
                return visitor.visitMappingValueName(self)
            else:
                return visitor.visitChildren(self)

    def mappingValueName(self):
        localctx = SolidityParser.MappingValueNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_mappingValueName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTypeNameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameterList(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.FunctionTypeParameterListContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.FunctionTypeParameterListContext, i
                )

        def InternalKeyword(self, i: int = None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def ExternalKeyword(self, i: int = None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def stateMutability(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(
                    SolidityParser.StateMutabilityContext, i
                )

        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionTypeName"):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionTypeName"):
                listener.exitFunctionTypeName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctionTypeName"):
                return visitor.visitFunctionTypeName(self)
            else:
                return visitor.visitChildren(self)

    def functionTypeName(self):
        localctx = SolidityParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_functionTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.match(SolidityParser.T__37)
            self.state = 626
            self.functionTypeParameterList()
            self.state = 632
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 66, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 630
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SolidityParser.InternalKeyword]:
                        self.state = 627
                        self.match(SolidityParser.InternalKeyword)
                        pass
                    elif token in [SolidityParser.ExternalKeyword]:
                        self.state = 628
                        self.match(SolidityParser.ExternalKeyword)
                        pass
                    elif token in [
                        SolidityParser.ConstantKeyword,
                        SolidityParser.PayableKeyword,
                        SolidityParser.PureKeyword,
                        SolidityParser.ViewKeyword,
                    ]:
                        self.state = 629
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 634
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 66, self._ctx)

            self.state = 637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 67, self._ctx)
            if la_ == 1:
                self.state = 635
                self.match(SolidityParser.T__38)
                self.state = 636
                self.functionTypeParameterList()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StorageLocationContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SolidityParser.RULE_storageLocation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStorageLocation"):
                listener.enterStorageLocation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStorageLocation"):
                listener.exitStorageLocation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStorageLocation"):
                return visitor.visitStorageLocation(self)
            else:
                return visitor.visitChildren(self)

    def storageLocation(self):
        localctx = SolidityParser.StorageLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_storageLocation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SolidityParser.T__47)
                            | (1 << SolidityParser.T__48)
                            | (1 << SolidityParser.T__49)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StateMutabilityContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(SolidityParser.PureKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(SolidityParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateMutability

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStateMutability"):
                listener.enterStateMutability(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStateMutability"):
                listener.exitStateMutability(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStateMutability"):
                return visitor.visitStateMutability(self)
            else:
                return visitor.visitChildren(self)

    def stateMutability(self):
        localctx = SolidityParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_stateMutability)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 110)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 110))
                        & (
                            (1 << (SolidityParser.ConstantKeyword - 110))
                            | (1 << (SolidityParser.PayableKeyword - 110))
                            | (1 << (SolidityParser.PureKeyword - 110))
                            | (1 << (SolidityParser.ViewKeyword - 110))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_block

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBlock"):
                listener.enterBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBlock"):
                listener.exitBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBlock"):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)

    def block(self):
        localctx = SolidityParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_block)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(SolidityParser.T__14)
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                (((_la - 6)) & ~0x3F) == 0
                and (
                    (1 << (_la - 6))
                    & (
                        (1 << (SolidityParser.T__5 - 6))
                        | (1 << (SolidityParser.T__13 - 6))
                        | (1 << (SolidityParser.T__14 - 6))
                        | (1 << (SolidityParser.T__22 - 6))
                        | (1 << (SolidityParser.T__24 - 6))
                        | (1 << (SolidityParser.T__26 - 6))
                        | (1 << (SolidityParser.T__29 - 6))
                        | (1 << (SolidityParser.T__30 - 6))
                        | (1 << (SolidityParser.T__37 - 6))
                        | (1 << (SolidityParser.T__41 - 6))
                        | (1 << (SolidityParser.T__43 - 6))
                        | (1 << (SolidityParser.T__45 - 6))
                        | (1 << (SolidityParser.T__49 - 6))
                        | (1 << (SolidityParser.T__50 - 6))
                        | (1 << (SolidityParser.T__52 - 6))
                        | (1 << (SolidityParser.T__54 - 6))
                        | (1 << (SolidityParser.T__55 - 6))
                        | (1 << (SolidityParser.T__56 - 6))
                        | (1 << (SolidityParser.T__57 - 6))
                        | (1 << (SolidityParser.T__58 - 6))
                        | (1 << (SolidityParser.T__59 - 6))
                        | (1 << (SolidityParser.T__60 - 6))
                        | (1 << (SolidityParser.T__61 - 6))
                        | (1 << (SolidityParser.T__62 - 6))
                        | (1 << (SolidityParser.T__63 - 6))
                        | (1 << (SolidityParser.T__64 - 6))
                        | (1 << (SolidityParser.T__65 - 6))
                        | (1 << (SolidityParser.T__66 - 6))
                        | (1 << (SolidityParser.T__67 - 6))
                        | (1 << (SolidityParser.T__68 - 6))
                    )
                )
                != 0
            ) or (
                (((_la - 71)) & ~0x3F) == 0
                and (
                    (1 << (_la - 71))
                    & (
                        (1 << (SolidityParser.T__70 - 71))
                        | (1 << (SolidityParser.T__71 - 71))
                        | (1 << (SolidityParser.T__94 - 71))
                        | (1 << (SolidityParser.Int - 71))
                        | (1 << (SolidityParser.Uint - 71))
                        | (1 << (SolidityParser.Byte - 71))
                        | (1 << (SolidityParser.Fixed - 71))
                        | (1 << (SolidityParser.Ufixed - 71))
                        | (1 << (SolidityParser.BooleanLiteral - 71))
                        | (1 << (SolidityParser.DecimalNumber - 71))
                        | (1 << (SolidityParser.HexNumber - 71))
                        | (1 << (SolidityParser.HexLiteralFragment - 71))
                        | (1 << (SolidityParser.BreakKeyword - 71))
                        | (1 << (SolidityParser.ContinueKeyword - 71))
                        | (1 << (SolidityParser.LeaveKeyword - 71))
                        | (1 << (SolidityParser.PayableKeyword - 71))
                        | (1 << (SolidityParser.TypeKeyword - 71))
                        | (1 << (SolidityParser.GlobalKeyword - 71))
                        | (1 << (SolidityParser.ConstructorKeyword - 71))
                        | (1 << (SolidityParser.ReceiveKeyword - 71))
                        | (1 << (SolidityParser.Identifier - 71))
                        | (1 << (SolidityParser.StringLiteralFragment - 71))
                    )
                )
                != 0
            ):
                self.state = 644
                self.statement()
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 650
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(SolidityParser.IfStatementContext, 0)

        def tryStatement(self):
            return self.getTypedRuleContext(SolidityParser.TryStatementContext, 0)

        def whileStatement(self):
            return self.getTypedRuleContext(SolidityParser.WhileStatementContext, 0)

        def forStatement(self):
            return self.getTypedRuleContext(SolidityParser.ForStatementContext, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext, 0)

        def inlineAssemblyStatement(self):
            return self.getTypedRuleContext(
                SolidityParser.InlineAssemblyStatementContext, 0
            )

        def doWhileStatement(self):
            return self.getTypedRuleContext(SolidityParser.DoWhileStatementContext, 0)

        def continueStatement(self):
            return self.getTypedRuleContext(SolidityParser.ContinueStatementContext, 0)

        def breakStatement(self):
            return self.getTypedRuleContext(SolidityParser.BreakStatementContext, 0)

        def returnStatement(self):
            return self.getTypedRuleContext(SolidityParser.ReturnStatementContext, 0)

        def throwStatement(self):
            return self.getTypedRuleContext(SolidityParser.ThrowStatementContext, 0)

        def emitStatement(self):
            return self.getTypedRuleContext(SolidityParser.EmitStatementContext, 0)

        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext, 0)

        def uncheckedStatement(self):
            return self.getTypedRuleContext(SolidityParser.UncheckedStatementContext, 0)

        def revertStatement(self):
            return self.getTypedRuleContext(SolidityParser.RevertStatementContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStatement"):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)

    def statement(self):
        localctx = SolidityParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_statement)
        try:
            self.state = 667
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 69, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 652
                self.ifStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 653
                self.tryStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 654
                self.whileStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 655
                self.forStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 656
                self.block()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 657
                self.inlineAssemblyStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 658
                self.doWhileStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 659
                self.continueStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 660
                self.breakStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 661
                self.returnStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 662
                self.throwStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 663
                self.emitStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 664
                self.simpleStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 665
                self.uncheckedStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 666
                self.revertStatement()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionStatementContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_expressionStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionStatement"):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionStatement"):
                listener.exitExpressionStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpressionStatement"):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)

    def expressionStatement(self):
        localctx = SolidityParser.ExpressionStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 98, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.expression(0)
            self.state = 670
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStatementContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_ifStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIfStatement"):
                listener.enterIfStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIfStatement"):
                listener.exitIfStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIfStatement"):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)

    def ifStatement(self):
        localctx = SolidityParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.match(SolidityParser.T__50)
            self.state = 673
            self.match(SolidityParser.T__22)
            self.state = 674
            self.expression(0)
            self.state = 675
            self.match(SolidityParser.T__23)
            self.state = 676
            self.statement()
            self.state = 679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 70, self._ctx)
            if la_ == 1:
                self.state = 677
                self.match(SolidityParser.T__51)
                self.state = 678
                self.statement()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryStatementContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext, 0)

        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext, 0)

        def catchClause(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CatchClauseContext, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_tryStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTryStatement"):
                listener.enterTryStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTryStatement"):
                listener.exitTryStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTryStatement"):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)

    def tryStatement(self):
        localctx = SolidityParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_tryStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(SolidityParser.T__52)
            self.state = 682
            self.expression(0)
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.T__38:
                self.state = 683
                self.returnParameters()

            self.state = 686
            self.block()
            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 687
                self.catchClause()
                self.state = 690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == SolidityParser.T__53):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchClauseContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext, 0)

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_catchClause

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCatchClause"):
                listener.enterCatchClause(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCatchClause"):
                listener.exitCatchClause(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCatchClause"):
                return visitor.visitCatchClause(self)
            else:
                return visitor.visitChildren(self)

    def catchClause(self):
        localctx = SolidityParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_catchClause)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.match(SolidityParser.T__53)
            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << SolidityParser.T__13)
                        | (1 << SolidityParser.T__22)
                        | (1 << SolidityParser.T__24)
                        | (1 << SolidityParser.T__43)
                        | (1 << SolidityParser.T__49)
                        | (1 << SolidityParser.T__61)
                    )
                )
                != 0
            ) or (
                (((_la - 95)) & ~0x3F) == 0
                and (
                    (1 << (_la - 95))
                    & (
                        (1 << (SolidityParser.T__94 - 95))
                        | (1 << (SolidityParser.LeaveKeyword - 95))
                        | (1 << (SolidityParser.PayableKeyword - 95))
                        | (1 << (SolidityParser.GlobalKeyword - 95))
                        | (1 << (SolidityParser.ConstructorKeyword - 95))
                        | (1 << (SolidityParser.ReceiveKeyword - 95))
                        | (1 << (SolidityParser.Identifier - 95))
                    )
                )
                != 0
            ):
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SolidityParser.T__13)
                            | (1 << SolidityParser.T__24)
                            | (1 << SolidityParser.T__43)
                            | (1 << SolidityParser.T__49)
                            | (1 << SolidityParser.T__61)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 95)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 95))
                        & (
                            (1 << (SolidityParser.T__94 - 95))
                            | (1 << (SolidityParser.LeaveKeyword - 95))
                            | (1 << (SolidityParser.PayableKeyword - 95))
                            | (1 << (SolidityParser.GlobalKeyword - 95))
                            | (1 << (SolidityParser.ConstructorKeyword - 95))
                            | (1 << (SolidityParser.ReceiveKeyword - 95))
                            | (1 << (SolidityParser.Identifier - 95))
                        )
                    )
                    != 0
                ):
                    self.state = 693
                    self.identifier()

                self.state = 696
                self.parameterList()

            self.state = 699
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStatementContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext, 0)

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_whileStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWhileStatement"):
                listener.enterWhileStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWhileStatement"):
                listener.exitWhileStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWhileStatement"):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)

    def whileStatement(self):
        localctx = SolidityParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.match(SolidityParser.T__54)
            self.state = 702
            self.match(SolidityParser.T__22)
            self.state = 703
            self.expression(0)
            self.state = 704
            self.match(SolidityParser.T__23)
            self.state = 705
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleStatementContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(
                SolidityParser.VariableDeclarationStatementContext, 0
            )

        def expressionStatement(self):
            return self.getTypedRuleContext(
                SolidityParser.ExpressionStatementContext, 0
            )

        def getRuleIndex(self):
            return SolidityParser.RULE_simpleStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSimpleStatement"):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSimpleStatement"):
                listener.exitSimpleStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSimpleStatement"):
                return visitor.visitSimpleStatement(self)
            else:
                return visitor.visitChildren(self)

    def simpleStatement(self):
        localctx = SolidityParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_simpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 75, self._ctx)
            if la_ == 1:
                self.state = 707
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 708
                self.expressionStatement()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UncheckedStatementContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_uncheckedStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUncheckedStatement"):
                listener.enterUncheckedStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUncheckedStatement"):
                listener.exitUncheckedStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUncheckedStatement"):
                return visitor.visitUncheckedStatement(self)
            else:
                return visitor.visitChildren(self)

    def uncheckedStatement(self):
        localctx = SolidityParser.UncheckedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_uncheckedStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.match(SolidityParser.T__55)
            self.state = 712
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStatementContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext, 0)

        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext, 0)

        def expressionStatement(self):
            return self.getTypedRuleContext(
                SolidityParser.ExpressionStatementContext, 0
            )

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_forStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterForStatement"):
                listener.enterForStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitForStatement"):
                listener.exitForStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitForStatement"):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)

    def forStatement(self):
        localctx = SolidityParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_forStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.match(SolidityParser.T__26)
            self.state = 715
            self.match(SolidityParser.T__22)
            self.state = 718
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                SolidityParser.T__5,
                SolidityParser.T__13,
                SolidityParser.T__22,
                SolidityParser.T__24,
                SolidityParser.T__29,
                SolidityParser.T__30,
                SolidityParser.T__37,
                SolidityParser.T__41,
                SolidityParser.T__43,
                SolidityParser.T__45,
                SolidityParser.T__49,
                SolidityParser.T__61,
                SolidityParser.T__62,
                SolidityParser.T__63,
                SolidityParser.T__64,
                SolidityParser.T__65,
                SolidityParser.T__66,
                SolidityParser.T__67,
                SolidityParser.T__68,
                SolidityParser.T__70,
                SolidityParser.T__71,
                SolidityParser.T__94,
                SolidityParser.Int,
                SolidityParser.Uint,
                SolidityParser.Byte,
                SolidityParser.Fixed,
                SolidityParser.Ufixed,
                SolidityParser.BooleanLiteral,
                SolidityParser.DecimalNumber,
                SolidityParser.HexNumber,
                SolidityParser.HexLiteralFragment,
                SolidityParser.LeaveKeyword,
                SolidityParser.PayableKeyword,
                SolidityParser.TypeKeyword,
                SolidityParser.GlobalKeyword,
                SolidityParser.ConstructorKeyword,
                SolidityParser.ReceiveKeyword,
                SolidityParser.Identifier,
                SolidityParser.StringLiteralFragment,
            ]:
                self.state = 716
                self.simpleStatement()
                pass
            elif token in [SolidityParser.T__1]:
                self.state = 717
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                SolidityParser.T__5,
                SolidityParser.T__13,
                SolidityParser.T__22,
                SolidityParser.T__24,
                SolidityParser.T__29,
                SolidityParser.T__30,
                SolidityParser.T__37,
                SolidityParser.T__41,
                SolidityParser.T__43,
                SolidityParser.T__45,
                SolidityParser.T__49,
                SolidityParser.T__61,
                SolidityParser.T__62,
                SolidityParser.T__63,
                SolidityParser.T__64,
                SolidityParser.T__65,
                SolidityParser.T__66,
                SolidityParser.T__67,
                SolidityParser.T__68,
                SolidityParser.T__70,
                SolidityParser.T__71,
                SolidityParser.T__94,
                SolidityParser.Int,
                SolidityParser.Uint,
                SolidityParser.Byte,
                SolidityParser.Fixed,
                SolidityParser.Ufixed,
                SolidityParser.BooleanLiteral,
                SolidityParser.DecimalNumber,
                SolidityParser.HexNumber,
                SolidityParser.HexLiteralFragment,
                SolidityParser.LeaveKeyword,
                SolidityParser.PayableKeyword,
                SolidityParser.TypeKeyword,
                SolidityParser.GlobalKeyword,
                SolidityParser.ConstructorKeyword,
                SolidityParser.ReceiveKeyword,
                SolidityParser.Identifier,
                SolidityParser.StringLiteralFragment,
            ]:
                self.state = 720
                self.expressionStatement()
                pass
            elif token in [SolidityParser.T__1]:
                self.state = 721
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (((_la - 6)) & ~0x3F) == 0
                and (
                    (1 << (_la - 6))
                    & (
                        (1 << (SolidityParser.T__5 - 6))
                        | (1 << (SolidityParser.T__13 - 6))
                        | (1 << (SolidityParser.T__22 - 6))
                        | (1 << (SolidityParser.T__24 - 6))
                        | (1 << (SolidityParser.T__29 - 6))
                        | (1 << (SolidityParser.T__30 - 6))
                        | (1 << (SolidityParser.T__37 - 6))
                        | (1 << (SolidityParser.T__41 - 6))
                        | (1 << (SolidityParser.T__43 - 6))
                        | (1 << (SolidityParser.T__45 - 6))
                        | (1 << (SolidityParser.T__49 - 6))
                        | (1 << (SolidityParser.T__61 - 6))
                        | (1 << (SolidityParser.T__62 - 6))
                        | (1 << (SolidityParser.T__63 - 6))
                        | (1 << (SolidityParser.T__64 - 6))
                        | (1 << (SolidityParser.T__65 - 6))
                        | (1 << (SolidityParser.T__66 - 6))
                        | (1 << (SolidityParser.T__67 - 6))
                        | (1 << (SolidityParser.T__68 - 6))
                    )
                )
                != 0
            ) or (
                (((_la - 71)) & ~0x3F) == 0
                and (
                    (1 << (_la - 71))
                    & (
                        (1 << (SolidityParser.T__70 - 71))
                        | (1 << (SolidityParser.T__71 - 71))
                        | (1 << (SolidityParser.T__94 - 71))
                        | (1 << (SolidityParser.Int - 71))
                        | (1 << (SolidityParser.Uint - 71))
                        | (1 << (SolidityParser.Byte - 71))
                        | (1 << (SolidityParser.Fixed - 71))
                        | (1 << (SolidityParser.Ufixed - 71))
                        | (1 << (SolidityParser.BooleanLiteral - 71))
                        | (1 << (SolidityParser.DecimalNumber - 71))
                        | (1 << (SolidityParser.HexNumber - 71))
                        | (1 << (SolidityParser.HexLiteralFragment - 71))
                        | (1 << (SolidityParser.LeaveKeyword - 71))
                        | (1 << (SolidityParser.PayableKeyword - 71))
                        | (1 << (SolidityParser.TypeKeyword - 71))
                        | (1 << (SolidityParser.GlobalKeyword - 71))
                        | (1 << (SolidityParser.ConstructorKeyword - 71))
                        | (1 << (SolidityParser.ReceiveKeyword - 71))
                        | (1 << (SolidityParser.Identifier - 71))
                        | (1 << (SolidityParser.StringLiteralFragment - 71))
                    )
                )
                != 0
            ):
                self.state = 724
                self.expression(0)

            self.state = 727
            self.match(SolidityParser.T__23)
            self.state = 728
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InlineAssemblyStatementContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext, 0)

        def StringLiteralFragment(self):
            return self.getToken(SolidityParser.StringLiteralFragment, 0)

        def inlineAssemblyStatementFlag(self):
            return self.getTypedRuleContext(
                SolidityParser.InlineAssemblyStatementFlagContext, 0
            )

        def getRuleIndex(self):
            return SolidityParser.RULE_inlineAssemblyStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInlineAssemblyStatement"):
                listener.enterInlineAssemblyStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInlineAssemblyStatement"):
                listener.exitInlineAssemblyStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInlineAssemblyStatement"):
                return visitor.visitInlineAssemblyStatement(self)
            else:
                return visitor.visitChildren(self)

    def inlineAssemblyStatement(self):
        localctx = SolidityParser.InlineAssemblyStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 114, self.RULE_inlineAssemblyStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(SolidityParser.T__56)
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.StringLiteralFragment:
                self.state = 731
                self.match(SolidityParser.StringLiteralFragment)

            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.T__22:
                self.state = 734
                self.match(SolidityParser.T__22)
                self.state = 735
                self.inlineAssemblyStatementFlag()
                self.state = 736
                self.match(SolidityParser.T__23)

            self.state = 740
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InlineAssemblyStatementFlagContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_inlineAssemblyStatementFlag

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInlineAssemblyStatementFlag"):
                listener.enterInlineAssemblyStatementFlag(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInlineAssemblyStatementFlag"):
                listener.exitInlineAssemblyStatementFlag(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInlineAssemblyStatementFlag"):
                return visitor.visitInlineAssemblyStatementFlag(self)
            else:
                return visitor.visitChildren(self)

    def inlineAssemblyStatementFlag(self):
        localctx = SolidityParser.InlineAssemblyStatementFlagContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 116, self.RULE_inlineAssemblyStatementFlag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoWhileStatementContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_doWhileStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDoWhileStatement"):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDoWhileStatement"):
                listener.exitDoWhileStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDoWhileStatement"):
                return visitor.visitDoWhileStatement(self)
            else:
                return visitor.visitChildren(self)

    def doWhileStatement(self):
        localctx = SolidityParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.match(SolidityParser.T__57)
            self.state = 745
            self.statement()
            self.state = 746
            self.match(SolidityParser.T__54)
            self.state = 747
            self.match(SolidityParser.T__22)
            self.state = 748
            self.expression(0)
            self.state = 749
            self.match(SolidityParser.T__23)
            self.state = 750
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContinueStatementContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_continueStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterContinueStatement"):
                listener.enterContinueStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitContinueStatement"):
                listener.exitContinueStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitContinueStatement"):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)

    def continueStatement(self):
        localctx = SolidityParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(SolidityParser.ContinueKeyword)
            self.state = 753
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BreakStatementContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_breakStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBreakStatement"):
                listener.enterBreakStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBreakStatement"):
                listener.exitBreakStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBreakStatement"):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)

    def breakStatement(self):
        localctx = SolidityParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(SolidityParser.BreakKeyword)
            self.state = 756
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStatementContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_returnStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReturnStatement"):
                listener.enterReturnStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReturnStatement"):
                listener.exitReturnStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReturnStatement"):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)

    def returnStatement(self):
        localctx = SolidityParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_returnStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(SolidityParser.T__58)
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (((_la - 6)) & ~0x3F) == 0
                and (
                    (1 << (_la - 6))
                    & (
                        (1 << (SolidityParser.T__5 - 6))
                        | (1 << (SolidityParser.T__13 - 6))
                        | (1 << (SolidityParser.T__22 - 6))
                        | (1 << (SolidityParser.T__24 - 6))
                        | (1 << (SolidityParser.T__29 - 6))
                        | (1 << (SolidityParser.T__30 - 6))
                        | (1 << (SolidityParser.T__37 - 6))
                        | (1 << (SolidityParser.T__41 - 6))
                        | (1 << (SolidityParser.T__43 - 6))
                        | (1 << (SolidityParser.T__45 - 6))
                        | (1 << (SolidityParser.T__49 - 6))
                        | (1 << (SolidityParser.T__61 - 6))
                        | (1 << (SolidityParser.T__62 - 6))
                        | (1 << (SolidityParser.T__63 - 6))
                        | (1 << (SolidityParser.T__64 - 6))
                        | (1 << (SolidityParser.T__65 - 6))
                        | (1 << (SolidityParser.T__66 - 6))
                        | (1 << (SolidityParser.T__67 - 6))
                        | (1 << (SolidityParser.T__68 - 6))
                    )
                )
                != 0
            ) or (
                (((_la - 71)) & ~0x3F) == 0
                and (
                    (1 << (_la - 71))
                    & (
                        (1 << (SolidityParser.T__70 - 71))
                        | (1 << (SolidityParser.T__71 - 71))
                        | (1 << (SolidityParser.T__94 - 71))
                        | (1 << (SolidityParser.Int - 71))
                        | (1 << (SolidityParser.Uint - 71))
                        | (1 << (SolidityParser.Byte - 71))
                        | (1 << (SolidityParser.Fixed - 71))
                        | (1 << (SolidityParser.Ufixed - 71))
                        | (1 << (SolidityParser.BooleanLiteral - 71))
                        | (1 << (SolidityParser.DecimalNumber - 71))
                        | (1 << (SolidityParser.HexNumber - 71))
                        | (1 << (SolidityParser.HexLiteralFragment - 71))
                        | (1 << (SolidityParser.LeaveKeyword - 71))
                        | (1 << (SolidityParser.PayableKeyword - 71))
                        | (1 << (SolidityParser.TypeKeyword - 71))
                        | (1 << (SolidityParser.GlobalKeyword - 71))
                        | (1 << (SolidityParser.ConstructorKeyword - 71))
                        | (1 << (SolidityParser.ReceiveKeyword - 71))
                        | (1 << (SolidityParser.Identifier - 71))
                        | (1 << (SolidityParser.StringLiteralFragment - 71))
                    )
                )
                != 0
            ):
                self.state = 759
                self.expression(0)

            self.state = 762
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThrowStatementContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return SolidityParser.RULE_throwStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterThrowStatement"):
                listener.enterThrowStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitThrowStatement"):
                listener.exitThrowStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitThrowStatement"):
                return visitor.visitThrowStatement(self)
            else:
                return visitor.visitChildren(self)

    def throwStatement(self):
        localctx = SolidityParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.match(SolidityParser.T__59)
            self.state = 765
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EmitStatementContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_emitStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEmitStatement"):
                listener.enterEmitStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEmitStatement"):
                listener.exitEmitStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEmitStatement"):
                return visitor.visitEmitStatement(self)
            else:
                return visitor.visitChildren(self)

    def emitStatement(self):
        localctx = SolidityParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_emitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.match(SolidityParser.T__60)
            self.state = 768
            self.functionCall()
            self.state = 769
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RevertStatementContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_revertStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRevertStatement"):
                listener.enterRevertStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRevertStatement"):
                listener.exitRevertStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRevertStatement"):
                return visitor.visitRevertStatement(self)
            else:
                return visitor.visitChildren(self)

    def revertStatement(self):
        localctx = SolidityParser.RevertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_revertStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(SolidityParser.T__61)
            self.state = 772
            self.functionCall()
            self.state = 773
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationStatementContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierListContext, 0)

        def variableDeclaration(self):
            return self.getTypedRuleContext(
                SolidityParser.VariableDeclarationContext, 0
            )

        def variableDeclarationList(self):
            return self.getTypedRuleContext(
                SolidityParser.VariableDeclarationListContext, 0
            )

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVariableDeclarationStatement"):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVariableDeclarationStatement"):
                listener.exitVariableDeclarationStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVariableDeclarationStatement"):
                return visitor.visitVariableDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)

    def variableDeclarationStatement(self):
        localctx = SolidityParser.VariableDeclarationStatementContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 132, self.RULE_variableDeclarationStatement)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 82, self._ctx)
            if la_ == 1:
                self.state = 775
                self.match(SolidityParser.T__62)
                self.state = 776
                self.identifierList()
                pass

            elif la_ == 2:
                self.state = 777
                self.variableDeclaration()
                pass

            elif la_ == 3:
                self.state = 778
                self.match(SolidityParser.T__22)
                self.state = 779
                self.variableDeclarationList()
                self.state = 780
                self.match(SolidityParser.T__23)
                pass

            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.T__10:
                self.state = 784
                self.match(SolidityParser.T__10)
                self.state = 785
                self.expression(0)

            self.state = 788
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationListContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.VariableDeclarationContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.VariableDeclarationContext, i
                )

        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVariableDeclarationList"):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVariableDeclarationList"):
                listener.exitVariableDeclarationList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVariableDeclarationList"):
                return visitor.visitVariableDeclarationList(self)
            else:
                return visitor.visitChildren(self)

    def variableDeclarationList(self):
        localctx = SolidityParser.VariableDeclarationListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 134, self.RULE_variableDeclarationList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                (((_la - 14)) & ~0x3F) == 0
                and (
                    (1 << (_la - 14))
                    & (
                        (1 << (SolidityParser.T__13 - 14))
                        | (1 << (SolidityParser.T__24 - 14))
                        | (1 << (SolidityParser.T__37 - 14))
                        | (1 << (SolidityParser.T__43 - 14))
                        | (1 << (SolidityParser.T__45 - 14))
                        | (1 << (SolidityParser.T__49 - 14))
                        | (1 << (SolidityParser.T__61 - 14))
                        | (1 << (SolidityParser.T__62 - 14))
                        | (1 << (SolidityParser.T__63 - 14))
                        | (1 << (SolidityParser.T__64 - 14))
                        | (1 << (SolidityParser.T__65 - 14))
                    )
                )
                != 0
            ) or (
                (((_la - 95)) & ~0x3F) == 0
                and (
                    (1 << (_la - 95))
                    & (
                        (1 << (SolidityParser.T__94 - 95))
                        | (1 << (SolidityParser.Int - 95))
                        | (1 << (SolidityParser.Uint - 95))
                        | (1 << (SolidityParser.Byte - 95))
                        | (1 << (SolidityParser.Fixed - 95))
                        | (1 << (SolidityParser.Ufixed - 95))
                        | (1 << (SolidityParser.LeaveKeyword - 95))
                        | (1 << (SolidityParser.PayableKeyword - 95))
                        | (1 << (SolidityParser.GlobalKeyword - 95))
                        | (1 << (SolidityParser.ConstructorKeyword - 95))
                        | (1 << (SolidityParser.ReceiveKeyword - 95))
                        | (1 << (SolidityParser.Identifier - 95))
                    )
                )
                != 0
            ):
                self.state = 790
                self.variableDeclaration()

            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SolidityParser.T__15:
                self.state = 793
                self.match(SolidityParser.T__15)
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (((_la - 14)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 14))
                        & (
                            (1 << (SolidityParser.T__13 - 14))
                            | (1 << (SolidityParser.T__24 - 14))
                            | (1 << (SolidityParser.T__37 - 14))
                            | (1 << (SolidityParser.T__43 - 14))
                            | (1 << (SolidityParser.T__45 - 14))
                            | (1 << (SolidityParser.T__49 - 14))
                            | (1 << (SolidityParser.T__61 - 14))
                            | (1 << (SolidityParser.T__62 - 14))
                            | (1 << (SolidityParser.T__63 - 14))
                            | (1 << (SolidityParser.T__64 - 14))
                            | (1 << (SolidityParser.T__65 - 14))
                        )
                    )
                    != 0
                ) or (
                    (((_la - 95)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 95))
                        & (
                            (1 << (SolidityParser.T__94 - 95))
                            | (1 << (SolidityParser.Int - 95))
                            | (1 << (SolidityParser.Uint - 95))
                            | (1 << (SolidityParser.Byte - 95))
                            | (1 << (SolidityParser.Fixed - 95))
                            | (1 << (SolidityParser.Ufixed - 95))
                            | (1 << (SolidityParser.LeaveKeyword - 95))
                            | (1 << (SolidityParser.PayableKeyword - 95))
                            | (1 << (SolidityParser.GlobalKeyword - 95))
                            | (1 << (SolidityParser.ConstructorKeyword - 95))
                            | (1 << (SolidityParser.ReceiveKeyword - 95))
                            | (1 << (SolidityParser.Identifier - 95))
                        )
                    )
                    != 0
                ):
                    self.state = 794
                    self.variableDeclaration()

                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierListContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_identifierList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifierList"):
                listener.enterIdentifierList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifierList"):
                listener.exitIdentifierList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIdentifierList"):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)

    def identifierList(self):
        localctx = SolidityParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_identifierList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(SolidityParser.T__22)
            self.state = 809
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 88, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 804
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << SolidityParser.T__13)
                                | (1 << SolidityParser.T__24)
                                | (1 << SolidityParser.T__43)
                                | (1 << SolidityParser.T__49)
                                | (1 << SolidityParser.T__61)
                            )
                        )
                        != 0
                    ) or (
                        (((_la - 95)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 95))
                            & (
                                (1 << (SolidityParser.T__94 - 95))
                                | (1 << (SolidityParser.LeaveKeyword - 95))
                                | (1 << (SolidityParser.PayableKeyword - 95))
                                | (1 << (SolidityParser.GlobalKeyword - 95))
                                | (1 << (SolidityParser.ConstructorKeyword - 95))
                                | (1 << (SolidityParser.ReceiveKeyword - 95))
                                | (1 << (SolidityParser.Identifier - 95))
                            )
                        )
                        != 0
                    ):
                        self.state = 803
                        self.identifier()

                    self.state = 806
                    self.match(SolidityParser.T__15)
                self.state = 811
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 88, self._ctx)

            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << SolidityParser.T__13)
                        | (1 << SolidityParser.T__24)
                        | (1 << SolidityParser.T__43)
                        | (1 << SolidityParser.T__49)
                        | (1 << SolidityParser.T__61)
                    )
                )
                != 0
            ) or (
                (((_la - 95)) & ~0x3F) == 0
                and (
                    (1 << (_la - 95))
                    & (
                        (1 << (SolidityParser.T__94 - 95))
                        | (1 << (SolidityParser.LeaveKeyword - 95))
                        | (1 << (SolidityParser.PayableKeyword - 95))
                        | (1 << (SolidityParser.GlobalKeyword - 95))
                        | (1 << (SolidityParser.ConstructorKeyword - 95))
                        | (1 << (SolidityParser.ReceiveKeyword - 95))
                        | (1 << (SolidityParser.Identifier - 95))
                    )
                )
                != 0
            ):
                self.state = 812
                self.identifier()

            self.state = 815
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElementaryTypeNameContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int(self):
            return self.getToken(SolidityParser.Int, 0)

        def Uint(self):
            return self.getToken(SolidityParser.Uint, 0)

        def Byte(self):
            return self.getToken(SolidityParser.Byte, 0)

        def Fixed(self):
            return self.getToken(SolidityParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(SolidityParser.Ufixed, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_elementaryTypeName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElementaryTypeName"):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElementaryTypeName"):
                listener.exitElementaryTypeName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElementaryTypeName"):
                return visitor.visitElementaryTypeName(self)
            else:
                return visitor.visitChildren(self)

    def elementaryTypeName(self):
        localctx = SolidityParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_elementaryTypeName)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 44)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 44))
                        & (
                            (1 << (SolidityParser.T__43 - 44))
                            | (1 << (SolidityParser.T__62 - 44))
                            | (1 << (SolidityParser.T__63 - 44))
                            | (1 << (SolidityParser.T__64 - 44))
                            | (1 << (SolidityParser.T__65 - 44))
                            | (1 << (SolidityParser.Int - 44))
                            | (1 << (SolidityParser.Uint - 44))
                            | (1 << (SolidityParser.Byte - 44))
                            | (1 << (SolidityParser.Fixed - 44))
                            | (1 << (SolidityParser.Ufixed - 44))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext, i)

        def primaryExpression(self):
            return self.getTypedRuleContext(SolidityParser.PrimaryExpressionContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext, 0)

        def functionCallArguments(self):
            return self.getTypedRuleContext(
                SolidityParser.FunctionCallArgumentsContext, 0
            )

        def getRuleIndex(self):
            return SolidityParser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpression"):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)

    def expression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 140
        self.enterRecursionRule(localctx, 140, self.RULE_expression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 90, self._ctx)
            if la_ == 1:
                self.state = 820
                self.match(SolidityParser.T__68)
                self.state = 821
                self.typeName(0)
                pass

            elif la_ == 2:
                self.state = 822
                self.match(SolidityParser.T__22)
                self.state = 823
                self.expression(0)
                self.state = 824
                self.match(SolidityParser.T__23)
                pass

            elif la_ == 3:
                self.state = 826
                _la = self._input.LA(1)
                if not (_la == SolidityParser.T__66 or _la == SolidityParser.T__67):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 827
                self.expression(19)
                pass

            elif la_ == 4:
                self.state = 828
                _la = self._input.LA(1)
                if not (_la == SolidityParser.T__29 or _la == SolidityParser.T__30):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 829
                self.expression(18)
                pass

            elif la_ == 5:
                self.state = 830
                self.match(SolidityParser.T__70)
                self.state = 831
                self.expression(17)
                pass

            elif la_ == 6:
                self.state = 832
                self.match(SolidityParser.T__71)
                self.state = 833
                self.expression(16)
                pass

            elif la_ == 7:
                self.state = 834
                self.match(SolidityParser.T__5)
                self.state = 835
                self.expression(15)
                pass

            elif la_ == 8:
                self.state = 836
                self.primaryExpression()
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 913
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 94, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 911
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 93, self._ctx)
                    if la_ == 1:
                        localctx = SolidityParser.ExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 839
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 14)"
                            )
                        self.state = 840
                        self.match(SolidityParser.T__72)
                        self.state = 841
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = SolidityParser.ExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 842
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 13)"
                            )
                        self.state = 843
                        _la = self._input.LA(1)
                        if not (
                            (
                                ((_la) & ~0x3F) == 0
                                and (
                                    (1 << _la)
                                    & (
                                        (1 << SolidityParser.T__2)
                                        | (1 << SolidityParser.T__31)
                                        | (1 << SolidityParser.T__32)
                                    )
                                )
                                != 0
                            )
                        ):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 844
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = SolidityParser.ExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 845
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 12)"
                            )
                        self.state = 846
                        _la = self._input.LA(1)
                        if not (
                            _la == SolidityParser.T__29 or _la == SolidityParser.T__30
                        ):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 847
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = SolidityParser.ExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 848
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 11)"
                            )
                        self.state = 849
                        _la = self._input.LA(1)
                        if not (
                            _la == SolidityParser.T__73 or _la == SolidityParser.T__74
                        ):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 850
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = SolidityParser.ExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 851
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 10)"
                            )
                        self.state = 852
                        self.match(SolidityParser.T__28)
                        self.state = 853
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = SolidityParser.ExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 854
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 9)"
                            )
                        self.state = 855
                        self.match(SolidityParser.T__4)
                        self.state = 856
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = SolidityParser.ExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 857
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 8)"
                            )
                        self.state = 858
                        self.match(SolidityParser.T__27)
                        self.state = 859
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = SolidityParser.ExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 860
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 7)"
                            )
                        self.state = 861
                        _la = self._input.LA(1)
                        if not (
                            (
                                ((_la) & ~0x3F) == 0
                                and (
                                    (1 << _la)
                                    & (
                                        (1 << SolidityParser.T__6)
                                        | (1 << SolidityParser.T__7)
                                        | (1 << SolidityParser.T__8)
                                        | (1 << SolidityParser.T__9)
                                    )
                                )
                                != 0
                            )
                        ):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 862
                        self.expression(8)
                        pass

                    elif la_ == 9:
                        localctx = SolidityParser.ExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 863
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 6)"
                            )
                        self.state = 864
                        _la = self._input.LA(1)
                        if not (
                            _la == SolidityParser.T__33 or _la == SolidityParser.T__34
                        ):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 865
                        self.expression(7)
                        pass

                    elif la_ == 10:
                        localctx = SolidityParser.ExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 866
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 5)"
                            )
                        self.state = 867
                        self.match(SolidityParser.T__75)
                        self.state = 868
                        self.expression(6)
                        pass

                    elif la_ == 11:
                        localctx = SolidityParser.ExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 869
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 4)"
                            )
                        self.state = 870
                        self.match(SolidityParser.T__3)
                        self.state = 871
                        self.expression(5)
                        pass

                    elif la_ == 12:
                        localctx = SolidityParser.ExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 872
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 3)"
                            )
                        self.state = 873
                        self.match(SolidityParser.T__76)
                        self.state = 874
                        self.expression(0)
                        self.state = 875
                        self.match(SolidityParser.T__69)
                        self.state = 876
                        self.expression(4)
                        pass

                    elif la_ == 13:
                        localctx = SolidityParser.ExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 878
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 2)"
                            )
                        self.state = 879
                        _la = self._input.LA(1)
                        if not (
                            _la == SolidityParser.T__10
                            or (
                                (((_la - 78)) & ~0x3F) == 0
                                and (
                                    (1 << (_la - 78))
                                    & (
                                        (1 << (SolidityParser.T__77 - 78))
                                        | (1 << (SolidityParser.T__78 - 78))
                                        | (1 << (SolidityParser.T__79 - 78))
                                        | (1 << (SolidityParser.T__80 - 78))
                                        | (1 << (SolidityParser.T__81 - 78))
                                        | (1 << (SolidityParser.T__82 - 78))
                                        | (1 << (SolidityParser.T__83 - 78))
                                        | (1 << (SolidityParser.T__84 - 78))
                                        | (1 << (SolidityParser.T__85 - 78))
                                        | (1 << (SolidityParser.T__86 - 78))
                                    )
                                )
                                != 0
                            )
                        ):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 880
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = SolidityParser.ExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 881
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 27)"
                            )
                        self.state = 882
                        _la = self._input.LA(1)
                        if not (
                            _la == SolidityParser.T__66 or _la == SolidityParser.T__67
                        ):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 15:
                        localctx = SolidityParser.ExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 883
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 25)"
                            )
                        self.state = 884
                        self.match(SolidityParser.T__41)
                        self.state = 885
                        self.expression(0)
                        self.state = 886
                        self.match(SolidityParser.T__42)
                        pass

                    elif la_ == 16:
                        localctx = SolidityParser.ExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 888
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 24)"
                            )
                        self.state = 889
                        self.match(SolidityParser.T__41)
                        self.state = 891
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (
                            (((_la - 6)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 6))
                                & (
                                    (1 << (SolidityParser.T__5 - 6))
                                    | (1 << (SolidityParser.T__13 - 6))
                                    | (1 << (SolidityParser.T__22 - 6))
                                    | (1 << (SolidityParser.T__24 - 6))
                                    | (1 << (SolidityParser.T__29 - 6))
                                    | (1 << (SolidityParser.T__30 - 6))
                                    | (1 << (SolidityParser.T__37 - 6))
                                    | (1 << (SolidityParser.T__41 - 6))
                                    | (1 << (SolidityParser.T__43 - 6))
                                    | (1 << (SolidityParser.T__45 - 6))
                                    | (1 << (SolidityParser.T__49 - 6))
                                    | (1 << (SolidityParser.T__61 - 6))
                                    | (1 << (SolidityParser.T__62 - 6))
                                    | (1 << (SolidityParser.T__63 - 6))
                                    | (1 << (SolidityParser.T__64 - 6))
                                    | (1 << (SolidityParser.T__65 - 6))
                                    | (1 << (SolidityParser.T__66 - 6))
                                    | (1 << (SolidityParser.T__67 - 6))
                                    | (1 << (SolidityParser.T__68 - 6))
                                )
                            )
                            != 0
                        ) or (
                            (((_la - 71)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 71))
                                & (
                                    (1 << (SolidityParser.T__70 - 71))
                                    | (1 << (SolidityParser.T__71 - 71))
                                    | (1 << (SolidityParser.T__94 - 71))
                                    | (1 << (SolidityParser.Int - 71))
                                    | (1 << (SolidityParser.Uint - 71))
                                    | (1 << (SolidityParser.Byte - 71))
                                    | (1 << (SolidityParser.Fixed - 71))
                                    | (1 << (SolidityParser.Ufixed - 71))
                                    | (1 << (SolidityParser.BooleanLiteral - 71))
                                    | (1 << (SolidityParser.DecimalNumber - 71))
                                    | (1 << (SolidityParser.HexNumber - 71))
                                    | (1 << (SolidityParser.HexLiteralFragment - 71))
                                    | (1 << (SolidityParser.LeaveKeyword - 71))
                                    | (1 << (SolidityParser.PayableKeyword - 71))
                                    | (1 << (SolidityParser.TypeKeyword - 71))
                                    | (1 << (SolidityParser.GlobalKeyword - 71))
                                    | (1 << (SolidityParser.ConstructorKeyword - 71))
                                    | (1 << (SolidityParser.ReceiveKeyword - 71))
                                    | (1 << (SolidityParser.Identifier - 71))
                                    | (1 << (SolidityParser.StringLiteralFragment - 71))
                                )
                            )
                            != 0
                        ):
                            self.state = 890
                            self.expression(0)

                        self.state = 893
                        self.match(SolidityParser.T__69)
                        self.state = 895
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (
                            (((_la - 6)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 6))
                                & (
                                    (1 << (SolidityParser.T__5 - 6))
                                    | (1 << (SolidityParser.T__13 - 6))
                                    | (1 << (SolidityParser.T__22 - 6))
                                    | (1 << (SolidityParser.T__24 - 6))
                                    | (1 << (SolidityParser.T__29 - 6))
                                    | (1 << (SolidityParser.T__30 - 6))
                                    | (1 << (SolidityParser.T__37 - 6))
                                    | (1 << (SolidityParser.T__41 - 6))
                                    | (1 << (SolidityParser.T__43 - 6))
                                    | (1 << (SolidityParser.T__45 - 6))
                                    | (1 << (SolidityParser.T__49 - 6))
                                    | (1 << (SolidityParser.T__61 - 6))
                                    | (1 << (SolidityParser.T__62 - 6))
                                    | (1 << (SolidityParser.T__63 - 6))
                                    | (1 << (SolidityParser.T__64 - 6))
                                    | (1 << (SolidityParser.T__65 - 6))
                                    | (1 << (SolidityParser.T__66 - 6))
                                    | (1 << (SolidityParser.T__67 - 6))
                                    | (1 << (SolidityParser.T__68 - 6))
                                )
                            )
                            != 0
                        ) or (
                            (((_la - 71)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 71))
                                & (
                                    (1 << (SolidityParser.T__70 - 71))
                                    | (1 << (SolidityParser.T__71 - 71))
                                    | (1 << (SolidityParser.T__94 - 71))
                                    | (1 << (SolidityParser.Int - 71))
                                    | (1 << (SolidityParser.Uint - 71))
                                    | (1 << (SolidityParser.Byte - 71))
                                    | (1 << (SolidityParser.Fixed - 71))
                                    | (1 << (SolidityParser.Ufixed - 71))
                                    | (1 << (SolidityParser.BooleanLiteral - 71))
                                    | (1 << (SolidityParser.DecimalNumber - 71))
                                    | (1 << (SolidityParser.HexNumber - 71))
                                    | (1 << (SolidityParser.HexLiteralFragment - 71))
                                    | (1 << (SolidityParser.LeaveKeyword - 71))
                                    | (1 << (SolidityParser.PayableKeyword - 71))
                                    | (1 << (SolidityParser.TypeKeyword - 71))
                                    | (1 << (SolidityParser.GlobalKeyword - 71))
                                    | (1 << (SolidityParser.ConstructorKeyword - 71))
                                    | (1 << (SolidityParser.ReceiveKeyword - 71))
                                    | (1 << (SolidityParser.Identifier - 71))
                                    | (1 << (SolidityParser.StringLiteralFragment - 71))
                                )
                            )
                            != 0
                        ):
                            self.state = 894
                            self.expression(0)

                        self.state = 897
                        self.match(SolidityParser.T__42)
                        pass

                    elif la_ == 17:
                        localctx = SolidityParser.ExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 898
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 23)"
                            )
                        self.state = 899
                        self.match(SolidityParser.T__44)
                        self.state = 900
                        self.identifier()
                        pass

                    elif la_ == 18:
                        localctx = SolidityParser.ExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 901
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 22)"
                            )
                        self.state = 902
                        self.match(SolidityParser.T__14)
                        self.state = 903
                        self.nameValueList()
                        self.state = 904
                        self.match(SolidityParser.T__16)
                        pass

                    elif la_ == 19:
                        localctx = SolidityParser.ExpressionContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expression
                        )
                        self.state = 906
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(
                                self, "self.precpred(self._ctx, 21)"
                            )
                        self.state = 907
                        self.match(SolidityParser.T__22)
                        self.state = 908
                        self.functionCallArguments()
                        self.state = 909
                        self.match(SolidityParser.T__23)
                        pass

                self.state = 915
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 94, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PrimaryExpressionContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(SolidityParser.BooleanLiteral, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext, 0)

        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def tupleExpression(self):
            return self.getTypedRuleContext(SolidityParser.TupleExpressionContext, 0)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_primaryExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimaryExpression"):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimaryExpression"):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrimaryExpression"):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)

    def primaryExpression(self):
        localctx = SolidityParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_primaryExpression)
        try:
            self.state = 925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 95, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 916
                self.match(SolidityParser.BooleanLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 917
                self.numberLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 918
                self.hexLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 919
                self.stringLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 920
                self.identifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 921
                self.match(SolidityParser.TypeKeyword)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 922
                self.match(SolidityParser.PayableKeyword)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 923
                self.tupleExpression()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 924
                self.typeName(0)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionListContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_expressionList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionList"):
                listener.enterExpressionList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionList"):
                listener.exitExpressionList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpressionList"):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)

    def expressionList(self):
        localctx = SolidityParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_expressionList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self.expression(0)
            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SolidityParser.T__15:
                self.state = 928
                self.match(SolidityParser.T__15)
                self.state = 929
                self.expression(0)
                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameValueListContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValue(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NameValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NameValueContext, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_nameValueList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNameValueList"):
                listener.enterNameValueList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNameValueList"):
                listener.exitNameValueList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNameValueList"):
                return visitor.visitNameValueList(self)
            else:
                return visitor.visitChildren(self)

    def nameValueList(self):
        localctx = SolidityParser.NameValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_nameValueList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.nameValue()
            self.state = 940
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 97, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 936
                    self.match(SolidityParser.T__15)
                    self.state = 937
                    self.nameValue()
                self.state = 942
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 97, self._ctx)

            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.T__15:
                self.state = 943
                self.match(SolidityParser.T__15)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameValueContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_nameValue

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNameValue"):
                listener.enterNameValue(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNameValue"):
                listener.exitNameValue(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNameValue"):
                return visitor.visitNameValue(self)
            else:
                return visitor.visitChildren(self)

    def nameValue(self):
        localctx = SolidityParser.NameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_nameValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.identifier()
            self.state = 947
            self.match(SolidityParser.T__69)
            self.state = 948
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallArgumentsContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext, 0)

        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_functionCallArguments

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionCallArguments"):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionCallArguments"):
                listener.exitFunctionCallArguments(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctionCallArguments"):
                return visitor.visitFunctionCallArguments(self)
            else:
                return visitor.visitChildren(self)

    def functionCallArguments(self):
        localctx = SolidityParser.FunctionCallArgumentsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 150, self.RULE_functionCallArguments)
        self._la = 0  # Token type
        try:
            self.state = 958
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 950
                self.match(SolidityParser.T__14)
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SolidityParser.T__13)
                            | (1 << SolidityParser.T__24)
                            | (1 << SolidityParser.T__43)
                            | (1 << SolidityParser.T__49)
                            | (1 << SolidityParser.T__61)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 95)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 95))
                        & (
                            (1 << (SolidityParser.T__94 - 95))
                            | (1 << (SolidityParser.LeaveKeyword - 95))
                            | (1 << (SolidityParser.PayableKeyword - 95))
                            | (1 << (SolidityParser.GlobalKeyword - 95))
                            | (1 << (SolidityParser.ConstructorKeyword - 95))
                            | (1 << (SolidityParser.ReceiveKeyword - 95))
                            | (1 << (SolidityParser.Identifier - 95))
                        )
                    )
                    != 0
                ):
                    self.state = 951
                    self.nameValueList()

                self.state = 954
                self.match(SolidityParser.T__16)
                pass
            elif token in [
                SolidityParser.T__5,
                SolidityParser.T__13,
                SolidityParser.T__22,
                SolidityParser.T__23,
                SolidityParser.T__24,
                SolidityParser.T__29,
                SolidityParser.T__30,
                SolidityParser.T__37,
                SolidityParser.T__41,
                SolidityParser.T__43,
                SolidityParser.T__45,
                SolidityParser.T__49,
                SolidityParser.T__61,
                SolidityParser.T__62,
                SolidityParser.T__63,
                SolidityParser.T__64,
                SolidityParser.T__65,
                SolidityParser.T__66,
                SolidityParser.T__67,
                SolidityParser.T__68,
                SolidityParser.T__70,
                SolidityParser.T__71,
                SolidityParser.T__94,
                SolidityParser.Int,
                SolidityParser.Uint,
                SolidityParser.Byte,
                SolidityParser.Fixed,
                SolidityParser.Ufixed,
                SolidityParser.BooleanLiteral,
                SolidityParser.DecimalNumber,
                SolidityParser.HexNumber,
                SolidityParser.HexLiteralFragment,
                SolidityParser.LeaveKeyword,
                SolidityParser.PayableKeyword,
                SolidityParser.TypeKeyword,
                SolidityParser.GlobalKeyword,
                SolidityParser.ConstructorKeyword,
                SolidityParser.ReceiveKeyword,
                SolidityParser.Identifier,
                SolidityParser.StringLiteralFragment,
            ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (((_la - 6)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 6))
                        & (
                            (1 << (SolidityParser.T__5 - 6))
                            | (1 << (SolidityParser.T__13 - 6))
                            | (1 << (SolidityParser.T__22 - 6))
                            | (1 << (SolidityParser.T__24 - 6))
                            | (1 << (SolidityParser.T__29 - 6))
                            | (1 << (SolidityParser.T__30 - 6))
                            | (1 << (SolidityParser.T__37 - 6))
                            | (1 << (SolidityParser.T__41 - 6))
                            | (1 << (SolidityParser.T__43 - 6))
                            | (1 << (SolidityParser.T__45 - 6))
                            | (1 << (SolidityParser.T__49 - 6))
                            | (1 << (SolidityParser.T__61 - 6))
                            | (1 << (SolidityParser.T__62 - 6))
                            | (1 << (SolidityParser.T__63 - 6))
                            | (1 << (SolidityParser.T__64 - 6))
                            | (1 << (SolidityParser.T__65 - 6))
                            | (1 << (SolidityParser.T__66 - 6))
                            | (1 << (SolidityParser.T__67 - 6))
                            | (1 << (SolidityParser.T__68 - 6))
                        )
                    )
                    != 0
                ) or (
                    (((_la - 71)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 71))
                        & (
                            (1 << (SolidityParser.T__70 - 71))
                            | (1 << (SolidityParser.T__71 - 71))
                            | (1 << (SolidityParser.T__94 - 71))
                            | (1 << (SolidityParser.Int - 71))
                            | (1 << (SolidityParser.Uint - 71))
                            | (1 << (SolidityParser.Byte - 71))
                            | (1 << (SolidityParser.Fixed - 71))
                            | (1 << (SolidityParser.Ufixed - 71))
                            | (1 << (SolidityParser.BooleanLiteral - 71))
                            | (1 << (SolidityParser.DecimalNumber - 71))
                            | (1 << (SolidityParser.HexNumber - 71))
                            | (1 << (SolidityParser.HexLiteralFragment - 71))
                            | (1 << (SolidityParser.LeaveKeyword - 71))
                            | (1 << (SolidityParser.PayableKeyword - 71))
                            | (1 << (SolidityParser.TypeKeyword - 71))
                            | (1 << (SolidityParser.GlobalKeyword - 71))
                            | (1 << (SolidityParser.ConstructorKeyword - 71))
                            | (1 << (SolidityParser.ReceiveKeyword - 71))
                            | (1 << (SolidityParser.Identifier - 71))
                            | (1 << (SolidityParser.StringLiteralFragment - 71))
                        )
                    )
                    != 0
                ):
                    self.state = 955
                    self.expressionList()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext, 0)

        def functionCallArguments(self):
            return self.getTypedRuleContext(
                SolidityParser.FunctionCallArgumentsContext, 0
            )

        def getRuleIndex(self):
            return SolidityParser.RULE_functionCall

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionCall"):
                listener.enterFunctionCall(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionCall"):
                listener.exitFunctionCall(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctionCall"):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)

    def functionCall(self):
        localctx = SolidityParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.expression(0)
            self.state = 961
            self.match(SolidityParser.T__22)
            self.state = 962
            self.functionCallArguments()
            self.state = 963
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyBlockContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyItem(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyItemContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyItemContext, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssemblyBlock"):
                listener.enterAssemblyBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssemblyBlock"):
                listener.exitAssemblyBlock(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssemblyBlock"):
                return visitor.visitAssemblyBlock(self)
            else:
                return visitor.visitChildren(self)

    def assemblyBlock(self):
        localctx = SolidityParser.AssemblyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_assemblyBlock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.match(SolidityParser.T__14)
            self.state = 969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << SolidityParser.T__13)
                        | (1 << SolidityParser.T__14)
                        | (1 << SolidityParser.T__22)
                        | (1 << SolidityParser.T__24)
                        | (1 << SolidityParser.T__26)
                        | (1 << SolidityParser.T__37)
                        | (1 << SolidityParser.T__43)
                        | (1 << SolidityParser.T__49)
                        | (1 << SolidityParser.T__50)
                        | (1 << SolidityParser.T__58)
                        | (1 << SolidityParser.T__61)
                    )
                )
                != 0
            ) or (
                (((_la - 66)) & ~0x3F) == 0
                and (
                    (1 << (_la - 66))
                    & (
                        (1 << (SolidityParser.T__65 - 66))
                        | (1 << (SolidityParser.T__87 - 66))
                        | (1 << (SolidityParser.T__90 - 66))
                        | (1 << (SolidityParser.T__94 - 66))
                        | (1 << (SolidityParser.BooleanLiteral - 66))
                        | (1 << (SolidityParser.DecimalNumber - 66))
                        | (1 << (SolidityParser.HexNumber - 66))
                        | (1 << (SolidityParser.HexLiteralFragment - 66))
                        | (1 << (SolidityParser.BreakKeyword - 66))
                        | (1 << (SolidityParser.ContinueKeyword - 66))
                        | (1 << (SolidityParser.LeaveKeyword - 66))
                        | (1 << (SolidityParser.PayableKeyword - 66))
                        | (1 << (SolidityParser.GlobalKeyword - 66))
                        | (1 << (SolidityParser.ConstructorKeyword - 66))
                        | (1 << (SolidityParser.ReceiveKeyword - 66))
                        | (1 << (SolidityParser.Identifier - 66))
                        | (1 << (SolidityParser.StringLiteralFragment - 66))
                    )
                )
                != 0
            ):
                self.state = 966
                self.assemblyItem()
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 972
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyItemContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext, 0)

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext, 0)

        def assemblyLocalDefinition(self):
            return self.getTypedRuleContext(
                SolidityParser.AssemblyLocalDefinitionContext, 0
            )

        def assemblyAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyAssignmentContext, 0)

        def assemblyStackAssignment(self):
            return self.getTypedRuleContext(
                SolidityParser.AssemblyStackAssignmentContext, 0
            )

        def labelDefinition(self):
            return self.getTypedRuleContext(SolidityParser.LabelDefinitionContext, 0)

        def assemblySwitch(self):
            return self.getTypedRuleContext(SolidityParser.AssemblySwitchContext, 0)

        def assemblyFunctionDefinition(self):
            return self.getTypedRuleContext(
                SolidityParser.AssemblyFunctionDefinitionContext, 0
            )

        def assemblyFor(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyForContext, 0)

        def assemblyIf(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIfContext, 0)

        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def LeaveKeyword(self):
            return self.getToken(SolidityParser.LeaveKeyword, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext, 0)

        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyItem

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssemblyItem"):
                listener.enterAssemblyItem(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssemblyItem"):
                listener.exitAssemblyItem(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssemblyItem"):
                return visitor.visitAssemblyItem(self)
            else:
                return visitor.visitChildren(self)

    def assemblyItem(self):
        localctx = SolidityParser.AssemblyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_assemblyItem)
        try:
            self.state = 991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 103, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 974
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 975
                self.assemblyBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 976
                self.assemblyExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 977
                self.assemblyLocalDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 978
                self.assemblyAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 979
                self.assemblyStackAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 980
                self.labelDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 981
                self.assemblySwitch()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 982
                self.assemblyFunctionDefinition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 983
                self.assemblyFor()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 984
                self.assemblyIf()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 985
                self.match(SolidityParser.BreakKeyword)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 986
                self.match(SolidityParser.ContinueKeyword)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 987
                self.match(SolidityParser.LeaveKeyword)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 988
                self.numberLiteral()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 989
                self.stringLiteral()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 990
                self.hexLiteral()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyExpressionContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyCall(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyCallContext, 0)

        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext, 0)

        def assemblyMember(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyMemberContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssemblyExpression"):
                listener.enterAssemblyExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssemblyExpression"):
                listener.exitAssemblyExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssemblyExpression"):
                return visitor.visitAssemblyExpression(self)
            else:
                return visitor.visitChildren(self)

    def assemblyExpression(self):
        localctx = SolidityParser.AssemblyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assemblyExpression)
        try:
            self.state = 996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 104, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 993
                self.assemblyCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 994
                self.assemblyLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 995
                self.assemblyMember()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyMemberContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyMember

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssemblyMember"):
                listener.enterAssemblyMember(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssemblyMember"):
                listener.exitAssemblyMember(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssemblyMember"):
                return visitor.visitAssemblyMember(self)
            else:
                return visitor.visitChildren(self)

    def assemblyMember(self):
        localctx = SolidityParser.AssemblyMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_assemblyMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            self.identifier()
            self.state = 999
            self.match(SolidityParser.T__44)
            self.state = 1000
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyCallContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def assemblyExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.AssemblyExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.AssemblyExpressionContext, i
                )

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCall

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssemblyCall"):
                listener.enterAssemblyCall(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssemblyCall"):
                listener.exitAssemblyCall(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssemblyCall"):
                return visitor.visitAssemblyCall(self)
            else:
                return visitor.visitChildren(self)

    def assemblyCall(self):
        localctx = SolidityParser.AssemblyCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_assemblyCall)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 105, self._ctx)
            if la_ == 1:
                self.state = 1002
                self.match(SolidityParser.T__58)
                pass

            elif la_ == 2:
                self.state = 1003
                self.match(SolidityParser.T__43)
                pass

            elif la_ == 3:
                self.state = 1004
                self.match(SolidityParser.T__65)
                pass

            elif la_ == 4:
                self.state = 1005
                self.identifier()
                pass

            self.state = 1020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 108, self._ctx)
            if la_ == 1:
                self.state = 1008
                self.match(SolidityParser.T__22)
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SolidityParser.T__13)
                            | (1 << SolidityParser.T__24)
                            | (1 << SolidityParser.T__43)
                            | (1 << SolidityParser.T__49)
                            | (1 << SolidityParser.T__58)
                            | (1 << SolidityParser.T__61)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 66)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 66))
                        & (
                            (1 << (SolidityParser.T__65 - 66))
                            | (1 << (SolidityParser.T__94 - 66))
                            | (1 << (SolidityParser.BooleanLiteral - 66))
                            | (1 << (SolidityParser.DecimalNumber - 66))
                            | (1 << (SolidityParser.HexNumber - 66))
                            | (1 << (SolidityParser.HexLiteralFragment - 66))
                            | (1 << (SolidityParser.LeaveKeyword - 66))
                            | (1 << (SolidityParser.PayableKeyword - 66))
                            | (1 << (SolidityParser.GlobalKeyword - 66))
                            | (1 << (SolidityParser.ConstructorKeyword - 66))
                            | (1 << (SolidityParser.ReceiveKeyword - 66))
                            | (1 << (SolidityParser.Identifier - 66))
                            | (1 << (SolidityParser.StringLiteralFragment - 66))
                        )
                    )
                    != 0
                ):
                    self.state = 1009
                    self.assemblyExpression()

                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SolidityParser.T__15:
                    self.state = 1012
                    self.match(SolidityParser.T__15)
                    self.state = 1013
                    self.assemblyExpression()
                    self.state = 1018
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1019
                self.match(SolidityParser.T__23)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyLocalDefinitionContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(
                SolidityParser.AssemblyIdentifierOrListContext, 0
            )

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLocalDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssemblyLocalDefinition"):
                listener.enterAssemblyLocalDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssemblyLocalDefinition"):
                listener.exitAssemblyLocalDefinition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssemblyLocalDefinition"):
                return visitor.visitAssemblyLocalDefinition(self)
            else:
                return visitor.visitChildren(self)

    def assemblyLocalDefinition(self):
        localctx = SolidityParser.AssemblyLocalDefinitionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 164, self.RULE_assemblyLocalDefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            self.match(SolidityParser.T__87)
            self.state = 1023
            self.assemblyIdentifierOrList()
            self.state = 1026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.T__88:
                self.state = 1024
                self.match(SolidityParser.T__88)
                self.state = 1025
                self.assemblyExpression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyAssignmentContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierOrList(self):
            return self.getTypedRuleContext(
                SolidityParser.AssemblyIdentifierOrListContext, 0
            )

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyAssignment

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssemblyAssignment"):
                listener.enterAssemblyAssignment(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssemblyAssignment"):
                listener.exitAssemblyAssignment(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssemblyAssignment"):
                return visitor.visitAssemblyAssignment(self)
            else:
                return visitor.visitChildren(self)

    def assemblyAssignment(self):
        localctx = SolidityParser.AssemblyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_assemblyAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.assemblyIdentifierOrList()
            self.state = 1029
            self.match(SolidityParser.T__88)
            self.state = 1030
            self.assemblyExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyIdentifierOrListContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def assemblyMember(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyMemberContext, 0)

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(
                SolidityParser.AssemblyIdentifierListContext, 0
            )

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierOrList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssemblyIdentifierOrList"):
                listener.enterAssemblyIdentifierOrList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssemblyIdentifierOrList"):
                listener.exitAssemblyIdentifierOrList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssemblyIdentifierOrList"):
                return visitor.visitAssemblyIdentifierOrList(self)
            else:
                return visitor.visitChildren(self)

    def assemblyIdentifierOrList(self):
        localctx = SolidityParser.AssemblyIdentifierOrListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 168, self.RULE_assemblyIdentifierOrList)
        try:
            self.state = 1039
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 110, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1032
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1033
                self.assemblyMember()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1034
                self.assemblyIdentifierList()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1035
                self.match(SolidityParser.T__22)
                self.state = 1036
                self.assemblyIdentifierList()
                self.state = 1037
                self.match(SolidityParser.T__23)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyIdentifierListContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssemblyIdentifierList"):
                listener.enterAssemblyIdentifierList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssemblyIdentifierList"):
                listener.exitAssemblyIdentifierList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssemblyIdentifierList"):
                return visitor.visitAssemblyIdentifierList(self)
            else:
                return visitor.visitChildren(self)

    def assemblyIdentifierList(self):
        localctx = SolidityParser.AssemblyIdentifierListContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 170, self.RULE_assemblyIdentifierList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.identifier()
            self.state = 1046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SolidityParser.T__15:
                self.state = 1042
                self.match(SolidityParser.T__15)
                self.state = 1043
                self.identifier()
                self.state = 1048
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyStackAssignmentContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyStackAssignment

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssemblyStackAssignment"):
                listener.enterAssemblyStackAssignment(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssemblyStackAssignment"):
                listener.exitAssemblyStackAssignment(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssemblyStackAssignment"):
                return visitor.visitAssemblyStackAssignment(self)
            else:
                return visitor.visitChildren(self)

    def assemblyStackAssignment(self):
        localctx = SolidityParser.AssemblyStackAssignmentContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 172, self.RULE_assemblyStackAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.assemblyExpression()
            self.state = 1050
            self.match(SolidityParser.T__89)
            self.state = 1051
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelDefinitionContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_labelDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLabelDefinition"):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLabelDefinition"):
                listener.exitLabelDefinition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLabelDefinition"):
                return visitor.visitLabelDefinition(self)
            else:
                return visitor.visitChildren(self)

    def labelDefinition(self):
        localctx = SolidityParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.identifier()
            self.state = 1054
            self.match(SolidityParser.T__69)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblySwitchContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext, 0)

        def assemblyCase(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyCaseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyCaseContext, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblySwitch

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssemblySwitch"):
                listener.enterAssemblySwitch(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssemblySwitch"):
                listener.exitAssemblySwitch(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssemblySwitch"):
                return visitor.visitAssemblySwitch(self)
            else:
                return visitor.visitChildren(self)

    def assemblySwitch(self):
        localctx = SolidityParser.AssemblySwitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_assemblySwitch)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.match(SolidityParser.T__90)
            self.state = 1057
            self.assemblyExpression()
            self.state = 1061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == SolidityParser.T__91 or _la == SolidityParser.T__92:
                self.state = 1058
                self.assemblyCase()
                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyCaseContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext, 0)

        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssemblyCase"):
                listener.enterAssemblyCase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssemblyCase"):
                listener.exitAssemblyCase(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssemblyCase"):
                return visitor.visitAssemblyCase(self)
            else:
                return visitor.visitChildren(self)

    def assemblyCase(self):
        localctx = SolidityParser.AssemblyCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_assemblyCase)
        try:
            self.state = 1070
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__91]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1064
                self.match(SolidityParser.T__91)
                self.state = 1065
                self.assemblyLiteral()
                self.state = 1066
                self.assemblyBlock()
                pass
            elif token in [SolidityParser.T__92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1068
                self.match(SolidityParser.T__92)
                self.state = 1069
                self.assemblyBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyFunctionDefinitionContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext, 0)

        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext, 0)

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(
                SolidityParser.AssemblyIdentifierListContext, 0
            )

        def assemblyFunctionReturns(self):
            return self.getTypedRuleContext(
                SolidityParser.AssemblyFunctionReturnsContext, 0
            )

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssemblyFunctionDefinition"):
                listener.enterAssemblyFunctionDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssemblyFunctionDefinition"):
                listener.exitAssemblyFunctionDefinition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssemblyFunctionDefinition"):
                return visitor.visitAssemblyFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)

    def assemblyFunctionDefinition(self):
        localctx = SolidityParser.AssemblyFunctionDefinitionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 180, self.RULE_assemblyFunctionDefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.match(SolidityParser.T__37)
            self.state = 1073
            self.identifier()
            self.state = 1074
            self.match(SolidityParser.T__22)
            self.state = 1076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << SolidityParser.T__13)
                        | (1 << SolidityParser.T__24)
                        | (1 << SolidityParser.T__43)
                        | (1 << SolidityParser.T__49)
                        | (1 << SolidityParser.T__61)
                    )
                )
                != 0
            ) or (
                (((_la - 95)) & ~0x3F) == 0
                and (
                    (1 << (_la - 95))
                    & (
                        (1 << (SolidityParser.T__94 - 95))
                        | (1 << (SolidityParser.LeaveKeyword - 95))
                        | (1 << (SolidityParser.PayableKeyword - 95))
                        | (1 << (SolidityParser.GlobalKeyword - 95))
                        | (1 << (SolidityParser.ConstructorKeyword - 95))
                        | (1 << (SolidityParser.ReceiveKeyword - 95))
                        | (1 << (SolidityParser.Identifier - 95))
                    )
                )
                != 0
            ):
                self.state = 1075
                self.assemblyIdentifierList()

            self.state = 1078
            self.match(SolidityParser.T__23)
            self.state = 1080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.T__93:
                self.state = 1079
                self.assemblyFunctionReturns()

            self.state = 1082
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyFunctionReturnsContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(
                SolidityParser.AssemblyIdentifierListContext, 0
            )

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionReturns

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssemblyFunctionReturns"):
                listener.enterAssemblyFunctionReturns(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssemblyFunctionReturns"):
                listener.exitAssemblyFunctionReturns(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssemblyFunctionReturns"):
                return visitor.visitAssemblyFunctionReturns(self)
            else:
                return visitor.visitChildren(self)

    def assemblyFunctionReturns(self):
        localctx = SolidityParser.AssemblyFunctionReturnsContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 182, self.RULE_assemblyFunctionReturns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.match(SolidityParser.T__93)
            self.state = 1085
            self.assemblyIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyForContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.AssemblyExpressionContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.AssemblyExpressionContext, i
                )

        def assemblyBlock(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssemblyFor"):
                listener.enterAssemblyFor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssemblyFor"):
                listener.exitAssemblyFor(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssemblyFor"):
                return visitor.visitAssemblyFor(self)
            else:
                return visitor.visitChildren(self)

    def assemblyFor(self):
        localctx = SolidityParser.AssemblyForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_assemblyFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self.match(SolidityParser.T__26)
            self.state = 1090
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__14]:
                self.state = 1088
                self.assemblyBlock()
                pass
            elif token in [
                SolidityParser.T__13,
                SolidityParser.T__24,
                SolidityParser.T__43,
                SolidityParser.T__49,
                SolidityParser.T__58,
                SolidityParser.T__61,
                SolidityParser.T__65,
                SolidityParser.T__94,
                SolidityParser.BooleanLiteral,
                SolidityParser.DecimalNumber,
                SolidityParser.HexNumber,
                SolidityParser.HexLiteralFragment,
                SolidityParser.LeaveKeyword,
                SolidityParser.PayableKeyword,
                SolidityParser.GlobalKeyword,
                SolidityParser.ConstructorKeyword,
                SolidityParser.ReceiveKeyword,
                SolidityParser.Identifier,
                SolidityParser.StringLiteralFragment,
            ]:
                self.state = 1089
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1092
            self.assemblyExpression()
            self.state = 1095
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__14]:
                self.state = 1093
                self.assemblyBlock()
                pass
            elif token in [
                SolidityParser.T__13,
                SolidityParser.T__24,
                SolidityParser.T__43,
                SolidityParser.T__49,
                SolidityParser.T__58,
                SolidityParser.T__61,
                SolidityParser.T__65,
                SolidityParser.T__94,
                SolidityParser.BooleanLiteral,
                SolidityParser.DecimalNumber,
                SolidityParser.HexNumber,
                SolidityParser.HexLiteralFragment,
                SolidityParser.LeaveKeyword,
                SolidityParser.PayableKeyword,
                SolidityParser.GlobalKeyword,
                SolidityParser.ConstructorKeyword,
                SolidityParser.ReceiveKeyword,
                SolidityParser.Identifier,
                SolidityParser.StringLiteralFragment,
            ]:
                self.state = 1094
                self.assemblyExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1097
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyIfContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext, 0)

        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIf

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssemblyIf"):
                listener.enterAssemblyIf(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssemblyIf"):
                listener.exitAssemblyIf(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssemblyIf"):
                return visitor.visitAssemblyIf(self)
            else:
                return visitor.visitChildren(self)

    def assemblyIf(self):
        localctx = SolidityParser.AssemblyIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_assemblyIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.match(SolidityParser.T__50)
            self.state = 1100
            self.assemblyExpression()
            self.state = 1101
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssemblyLiteralContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext, 0)

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext, 0)

        def BooleanLiteral(self):
            return self.getToken(SolidityParser.BooleanLiteral, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssemblyLiteral"):
                listener.enterAssemblyLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssemblyLiteral"):
                listener.exitAssemblyLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAssemblyLiteral"):
                return visitor.visitAssemblyLiteral(self)
            else:
                return visitor.visitChildren(self)

    def assemblyLiteral(self):
        localctx = SolidityParser.AssemblyLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_assemblyLiteral)
        try:
            self.state = 1108
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.StringLiteralFragment]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1103
                self.stringLiteral()
                pass
            elif token in [SolidityParser.DecimalNumber]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1104
                self.match(SolidityParser.DecimalNumber)
                pass
            elif token in [SolidityParser.HexNumber]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1105
                self.match(SolidityParser.HexNumber)
                pass
            elif token in [SolidityParser.HexLiteralFragment]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1106
                self.hexLiteral()
                pass
            elif token in [SolidityParser.BooleanLiteral]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1107
                self.match(SolidityParser.BooleanLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleExpressionContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_tupleExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTupleExpression"):
                listener.enterTupleExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTupleExpression"):
                listener.exitTupleExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTupleExpression"):
                return visitor.visitTupleExpression(self)
            else:
                return visitor.visitChildren(self)

    def tupleExpression(self):
        localctx = SolidityParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_tupleExpression)
        self._la = 0  # Token type
        try:
            self.state = 1136
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1110
                self.match(SolidityParser.T__22)

                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (((_la - 6)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 6))
                        & (
                            (1 << (SolidityParser.T__5 - 6))
                            | (1 << (SolidityParser.T__13 - 6))
                            | (1 << (SolidityParser.T__22 - 6))
                            | (1 << (SolidityParser.T__24 - 6))
                            | (1 << (SolidityParser.T__29 - 6))
                            | (1 << (SolidityParser.T__30 - 6))
                            | (1 << (SolidityParser.T__37 - 6))
                            | (1 << (SolidityParser.T__41 - 6))
                            | (1 << (SolidityParser.T__43 - 6))
                            | (1 << (SolidityParser.T__45 - 6))
                            | (1 << (SolidityParser.T__49 - 6))
                            | (1 << (SolidityParser.T__61 - 6))
                            | (1 << (SolidityParser.T__62 - 6))
                            | (1 << (SolidityParser.T__63 - 6))
                            | (1 << (SolidityParser.T__64 - 6))
                            | (1 << (SolidityParser.T__65 - 6))
                            | (1 << (SolidityParser.T__66 - 6))
                            | (1 << (SolidityParser.T__67 - 6))
                            | (1 << (SolidityParser.T__68 - 6))
                        )
                    )
                    != 0
                ) or (
                    (((_la - 71)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 71))
                        & (
                            (1 << (SolidityParser.T__70 - 71))
                            | (1 << (SolidityParser.T__71 - 71))
                            | (1 << (SolidityParser.T__94 - 71))
                            | (1 << (SolidityParser.Int - 71))
                            | (1 << (SolidityParser.Uint - 71))
                            | (1 << (SolidityParser.Byte - 71))
                            | (1 << (SolidityParser.Fixed - 71))
                            | (1 << (SolidityParser.Ufixed - 71))
                            | (1 << (SolidityParser.BooleanLiteral - 71))
                            | (1 << (SolidityParser.DecimalNumber - 71))
                            | (1 << (SolidityParser.HexNumber - 71))
                            | (1 << (SolidityParser.HexLiteralFragment - 71))
                            | (1 << (SolidityParser.LeaveKeyword - 71))
                            | (1 << (SolidityParser.PayableKeyword - 71))
                            | (1 << (SolidityParser.TypeKeyword - 71))
                            | (1 << (SolidityParser.GlobalKeyword - 71))
                            | (1 << (SolidityParser.ConstructorKeyword - 71))
                            | (1 << (SolidityParser.ReceiveKeyword - 71))
                            | (1 << (SolidityParser.Identifier - 71))
                            | (1 << (SolidityParser.StringLiteralFragment - 71))
                        )
                    )
                    != 0
                ):
                    self.state = 1111
                    self.expression(0)

                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SolidityParser.T__15:
                    self.state = 1114
                    self.match(SolidityParser.T__15)
                    self.state = 1116
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (
                        (((_la - 6)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 6))
                            & (
                                (1 << (SolidityParser.T__5 - 6))
                                | (1 << (SolidityParser.T__13 - 6))
                                | (1 << (SolidityParser.T__22 - 6))
                                | (1 << (SolidityParser.T__24 - 6))
                                | (1 << (SolidityParser.T__29 - 6))
                                | (1 << (SolidityParser.T__30 - 6))
                                | (1 << (SolidityParser.T__37 - 6))
                                | (1 << (SolidityParser.T__41 - 6))
                                | (1 << (SolidityParser.T__43 - 6))
                                | (1 << (SolidityParser.T__45 - 6))
                                | (1 << (SolidityParser.T__49 - 6))
                                | (1 << (SolidityParser.T__61 - 6))
                                | (1 << (SolidityParser.T__62 - 6))
                                | (1 << (SolidityParser.T__63 - 6))
                                | (1 << (SolidityParser.T__64 - 6))
                                | (1 << (SolidityParser.T__65 - 6))
                                | (1 << (SolidityParser.T__66 - 6))
                                | (1 << (SolidityParser.T__67 - 6))
                                | (1 << (SolidityParser.T__68 - 6))
                            )
                        )
                        != 0
                    ) or (
                        (((_la - 71)) & ~0x3F) == 0
                        and (
                            (1 << (_la - 71))
                            & (
                                (1 << (SolidityParser.T__70 - 71))
                                | (1 << (SolidityParser.T__71 - 71))
                                | (1 << (SolidityParser.T__94 - 71))
                                | (1 << (SolidityParser.Int - 71))
                                | (1 << (SolidityParser.Uint - 71))
                                | (1 << (SolidityParser.Byte - 71))
                                | (1 << (SolidityParser.Fixed - 71))
                                | (1 << (SolidityParser.Ufixed - 71))
                                | (1 << (SolidityParser.BooleanLiteral - 71))
                                | (1 << (SolidityParser.DecimalNumber - 71))
                                | (1 << (SolidityParser.HexNumber - 71))
                                | (1 << (SolidityParser.HexLiteralFragment - 71))
                                | (1 << (SolidityParser.LeaveKeyword - 71))
                                | (1 << (SolidityParser.PayableKeyword - 71))
                                | (1 << (SolidityParser.TypeKeyword - 71))
                                | (1 << (SolidityParser.GlobalKeyword - 71))
                                | (1 << (SolidityParser.ConstructorKeyword - 71))
                                | (1 << (SolidityParser.ReceiveKeyword - 71))
                                | (1 << (SolidityParser.Identifier - 71))
                                | (1 << (SolidityParser.StringLiteralFragment - 71))
                            )
                        )
                        != 0
                    ):
                        self.state = 1115
                        self.expression(0)

                    self.state = 1122
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1123
                self.match(SolidityParser.T__23)
                pass
            elif token in [SolidityParser.T__41]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1124
                self.match(SolidityParser.T__41)
                self.state = 1133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (((_la - 6)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 6))
                        & (
                            (1 << (SolidityParser.T__5 - 6))
                            | (1 << (SolidityParser.T__13 - 6))
                            | (1 << (SolidityParser.T__22 - 6))
                            | (1 << (SolidityParser.T__24 - 6))
                            | (1 << (SolidityParser.T__29 - 6))
                            | (1 << (SolidityParser.T__30 - 6))
                            | (1 << (SolidityParser.T__37 - 6))
                            | (1 << (SolidityParser.T__41 - 6))
                            | (1 << (SolidityParser.T__43 - 6))
                            | (1 << (SolidityParser.T__45 - 6))
                            | (1 << (SolidityParser.T__49 - 6))
                            | (1 << (SolidityParser.T__61 - 6))
                            | (1 << (SolidityParser.T__62 - 6))
                            | (1 << (SolidityParser.T__63 - 6))
                            | (1 << (SolidityParser.T__64 - 6))
                            | (1 << (SolidityParser.T__65 - 6))
                            | (1 << (SolidityParser.T__66 - 6))
                            | (1 << (SolidityParser.T__67 - 6))
                            | (1 << (SolidityParser.T__68 - 6))
                        )
                    )
                    != 0
                ) or (
                    (((_la - 71)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 71))
                        & (
                            (1 << (SolidityParser.T__70 - 71))
                            | (1 << (SolidityParser.T__71 - 71))
                            | (1 << (SolidityParser.T__94 - 71))
                            | (1 << (SolidityParser.Int - 71))
                            | (1 << (SolidityParser.Uint - 71))
                            | (1 << (SolidityParser.Byte - 71))
                            | (1 << (SolidityParser.Fixed - 71))
                            | (1 << (SolidityParser.Ufixed - 71))
                            | (1 << (SolidityParser.BooleanLiteral - 71))
                            | (1 << (SolidityParser.DecimalNumber - 71))
                            | (1 << (SolidityParser.HexNumber - 71))
                            | (1 << (SolidityParser.HexLiteralFragment - 71))
                            | (1 << (SolidityParser.LeaveKeyword - 71))
                            | (1 << (SolidityParser.PayableKeyword - 71))
                            | (1 << (SolidityParser.TypeKeyword - 71))
                            | (1 << (SolidityParser.GlobalKeyword - 71))
                            | (1 << (SolidityParser.ConstructorKeyword - 71))
                            | (1 << (SolidityParser.ReceiveKeyword - 71))
                            | (1 << (SolidityParser.Identifier - 71))
                            | (1 << (SolidityParser.StringLiteralFragment - 71))
                        )
                    )
                    != 0
                ):
                    self.state = 1125
                    self.expression(0)
                    self.state = 1130
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la == SolidityParser.T__15:
                        self.state = 1126
                        self.match(SolidityParser.T__15)
                        self.state = 1127
                        self.expression(0)
                        self.state = 1132
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                self.state = 1135
                self.match(SolidityParser.T__42)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberLiteralContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def NumberUnit(self):
            return self.getToken(SolidityParser.NumberUnit, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_numberLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumberLiteral"):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumberLiteral"):
                listener.exitNumberLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumberLiteral"):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)

    def numberLiteral(self):
        localctx = SolidityParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_numberLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            _la = self._input.LA(1)
            if not (
                _la == SolidityParser.DecimalNumber or _la == SolidityParser.HexNumber
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 125, self._ctx)
            if la_ == 1:
                self.state = 1139
                self.match(SolidityParser.NumberUnit)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def GlobalKeyword(self):
            return self.getToken(SolidityParser.GlobalKeyword, 0)

        def ConstructorKeyword(self):
            return self.getToken(SolidityParser.ConstructorKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def LeaveKeyword(self):
            return self.getToken(SolidityParser.LeaveKeyword, 0)

        def Identifier(self):
            return self.getToken(SolidityParser.Identifier, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_identifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifier"):
                listener.enterIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifier"):
                listener.exitIdentifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIdentifier"):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)

    def identifier(self):
        localctx = SolidityParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_identifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << SolidityParser.T__13)
                            | (1 << SolidityParser.T__24)
                            | (1 << SolidityParser.T__43)
                            | (1 << SolidityParser.T__49)
                            | (1 << SolidityParser.T__61)
                        )
                    )
                    != 0
                )
                or (
                    (((_la - 95)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 95))
                        & (
                            (1 << (SolidityParser.T__94 - 95))
                            | (1 << (SolidityParser.LeaveKeyword - 95))
                            | (1 << (SolidityParser.PayableKeyword - 95))
                            | (1 << (SolidityParser.GlobalKeyword - 95))
                            | (1 << (SolidityParser.ConstructorKeyword - 95))
                            | (1 << (SolidityParser.ReceiveKeyword - 95))
                            | (1 << (SolidityParser.Identifier - 95))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HexLiteralContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexLiteralFragment(self, i: int = None):
            if i is None:
                return self.getTokens(SolidityParser.HexLiteralFragment)
            else:
                return self.getToken(SolidityParser.HexLiteralFragment, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_hexLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHexLiteral"):
                listener.enterHexLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHexLiteral"):
                listener.exitHexLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitHexLiteral"):
                return visitor.visitHexLiteral(self)
            else:
                return visitor.visitChildren(self)

    def hexLiteral(self):
        localctx = SolidityParser.HexLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_hexLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1144
                    self.match(SolidityParser.HexLiteralFragment)

                else:
                    raise NoViableAltException(self)
                self.state = 1147
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 126, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OverrideSpecifierContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    SolidityParser.UserDefinedTypeNameContext
                )
            else:
                return self.getTypedRuleContext(
                    SolidityParser.UserDefinedTypeNameContext, i
                )

        def getRuleIndex(self):
            return SolidityParser.RULE_overrideSpecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOverrideSpecifier"):
                listener.enterOverrideSpecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOverrideSpecifier"):
                listener.exitOverrideSpecifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOverrideSpecifier"):
                return visitor.visitOverrideSpecifier(self)
            else:
                return visitor.visitChildren(self)

    def overrideSpecifier(self):
        localctx = SolidityParser.OverrideSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_overrideSpecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self.match(SolidityParser.T__95)
            self.state = 1161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == SolidityParser.T__22:
                self.state = 1150
                self.match(SolidityParser.T__22)
                self.state = 1151
                self.userDefinedTypeName()
                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == SolidityParser.T__15:
                    self.state = 1152
                    self.match(SolidityParser.T__15)
                    self.state = 1153
                    self.userDefinedTypeName()
                    self.state = 1158
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1159
                self.match(SolidityParser.T__23)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringLiteralContext(ParserRuleContext):
        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self, i: int = None):
            if i is None:
                return self.getTokens(SolidityParser.StringLiteralFragment)
            else:
                return self.getToken(SolidityParser.StringLiteralFragment, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_stringLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStringLiteral"):
                listener.enterStringLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStringLiteral"):
                listener.exitStringLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStringLiteral"):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)

    def stringLiteral(self):
        localctx = SolidityParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            self._errHandler.sync(self)
            _alt = 1
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1163
                    self.match(SolidityParser.StringLiteralFragment)

                else:
                    raise NoViableAltException(self)
                self.state = 1166
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 129, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[38] = self.typeName_sempred
        self._predicates[70] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx: TypeNameContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 3)

    def expression_sempred(self, localctx: ExpressionContext, predIndex: int):
        if predIndex == 1:
            return self.precpred(self._ctx, 14)

        if predIndex == 2:
            return self.precpred(self._ctx, 13)

        if predIndex == 3:
            return self.precpred(self._ctx, 12)

        if predIndex == 4:
            return self.precpred(self._ctx, 11)

        if predIndex == 5:
            return self.precpred(self._ctx, 10)

        if predIndex == 6:
            return self.precpred(self._ctx, 9)

        if predIndex == 7:
            return self.precpred(self._ctx, 8)

        if predIndex == 8:
            return self.precpred(self._ctx, 7)

        if predIndex == 9:
            return self.precpred(self._ctx, 6)

        if predIndex == 10:
            return self.precpred(self._ctx, 5)

        if predIndex == 11:
            return self.precpred(self._ctx, 4)

        if predIndex == 12:
            return self.precpred(self._ctx, 3)

        if predIndex == 13:
            return self.precpred(self._ctx, 2)

        if predIndex == 14:
            return self.precpred(self._ctx, 27)

        if predIndex == 15:
            return self.precpred(self._ctx, 25)

        if predIndex == 16:
            return self.precpred(self._ctx, 24)

        if predIndex == 17:
            return self.precpred(self._ctx, 23)

        if predIndex == 18:
            return self.precpred(self._ctx, 22)

        if predIndex == 19:
            return self.precpred(self._ctx, 21)
